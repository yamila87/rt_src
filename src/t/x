2016-02-24 13:22:45.152:INFO:omjr.Runner:Runner
2016-02-24 13:22:45.152:WARN:omjr.Runner:No tx manager found
2016-02-24 13:22:45.274:INFO:omjr.Runner:Deploying file:/home/usr10/devel/consultoria/EM/devel/rt_java/lib/jar/emrt.jar @ /
2016-02-24 13:22:45.297:INFO:oejs.Server:jetty-7.x.y-SNAPSHOT
2016-02-24 13:22:45.332:INFO:oejw.WebInfConfiguration:Extract jar:file:/home/usr10/devel/consultoria/EM/devel/rt_java/lib/jar/emrt.jar!/ to /tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp
2016-02-24 13:22:46.171:INFO:oejpw.PlusConfiguration:No Transaction manager found - if your webapp requires one, please configure one.
2016-02-24 13:22:46.563:INFO:oejsh.ContextHandler:started o.e.j.w.WebAppContext{/,file:/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/},file:/home/usr10/devel/consultoria/EM/devel/rt_java/lib/jar/emrt.jar
2016-02-24 13:22:46.886:INFO:oejus.SslContextFactory:Enabled Protocols [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2] of [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2]
2016-02-24 13:22:46.910:INFO:oejs.AbstractConnector:Started SslSelectChannelConnector@0.0.0.0:8999
2016-02-24 13:22:47.712:WARN:oeji.nio:javax.net.ssl.SSLException: Inbound closed before receiving peer's close_notify: possible truncation attack?
LOG:2016-02-24_13:22:47:DBG:9:SERVLET SCRIPT REQUEST INI:"GET" 
LOG:2016-02-24_13:22:47:DBG:2:SERVLET SCRIPT REQUEST INITIALIZE ONCE:"GET" 
LOG:2016-02-24_13:22:47:DBG:5:SERVLET SCRIPT EXECUTE:"t_webServer.js" 
LOG:2016-02-24_13:22:47:DBG:5:RT JS LOAD TRY:"librt.js" 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET:"java.io.BufferedInputStream@7837cb30" 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET READ:8192 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET READ:8192 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET READ:8192 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET READ:1347 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET READ:-1 
LOG:2016-02-24_13:22:47:DBG:9:STREAM GET RESULT:"//INFO: OCULTAR los detalles del runtime en una API estandard, igual en movil, java, C#, etc.\n\n//*****************************************************************************\n//S: basicos\nGLOBAL\u003d this; //D: referencia al ambiente global, ej para que sea accesible a closures\nGLOBAL.LibRt\u003d GLOBAL.LibRt || (GLOBAL.Packages ? Packages.LibRt : this) ;\nGLOBAL.rtType\u003d \"java\";\n\n//*****************************************************************************\n//S: compatibilidad rhino/jdk\nprint\u003d this.print || function (m) { java.lang.System.out.println(m); }\n//*****************************************************************************\n//S: compatibilidad con el browser\nconsole\u003d {};\nconsole.log\u003d function (m) { logm(\"DBG\",1,m); }\nwindow\u003d this;\nshowMsg\u003d function (m) { logm(\"DBG\",1,m); }\nsetTimeout\u003d function (cb) { logm(\"ERR\",1,\"setTimeout SOLO FUNCIONA dentro de runWithTimer\"); }\nsetInterval\u003d function (cb) { logm(\"ERR\",1,\"setTimeout SOLO FUNCIONA dentro de runWithTimer\"); }\n\nrunWithTimer\u003d function (f) { //U: agrega setTimeout y setInterval SOLO DENTRO de la funcion f\n\tload(\u0027libBrowserTimer.js\u0027);\n\tvar timerLoop \u003d makeWindowTimer(this, java.lang.Thread.sleep);\n\t//A: tenemos emulacion para setTimeout en el servidor\n\tf();\n\ttimerLoop();\n}\n\ncxAjaxCall\u003d function(rpcOpts, params, cb,cbError) {\n\tvar r\u003d null;\n\ttry { var f\u003d GLOBAL[rpcOpts.funName]; r\u003d f(params); }\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"CX AJAX CALL\",{rpcOpts: rpcOpts, params: params},ex);\t\n\t\tr\u003d {LibCxException: exceptionToString(ex)};\n\t}\n\tsetTimeout(function () { cb(r); },0); //XXX: emular para tests\n}\n//A: emulamos ajax desde cliente\n\n\n\n\n//*****************************************************************************\n//S: serializacion\nser_json\u003d function (o,wantsPretty) {\n\tvar s;\n\tif (o!\u003dnull) {\n\t\ttry { s\u003d JSON.stringify(o,null,wantsPretty ? 2 : null); }\n\t\tcatch (ex) { s\u003dString(o); }\n\t}\n\telse {\n\t\ts\u003d\"null\";\n\t}\n\treturn s;\n}\n\nenc_base64\u003d function (val) {\n\treturn javax.xml.bind.DatatypeConverter.printBase64Binary(new java.lang.String(val).getBytes(\"ISO-8859-1\"));\n}\n\nenc_base64_r\u003d function (base64str) {\n\tvar bytes\u003d javax.xml.bind.DatatypeConverter.parseBase64Binary(base64str);\n\tvar dec\u003d new java.lang.String(bytes,\"ISO-8859-1\")+\"\";\n\treturn dec;\n}\n\n//*****************************************************************************\n//S: log\nLibRt.logInit(false); //A: asegurarse que el log este inicializado\nLogLvlMax\u003d LibRt.LogLvlMax;\nset_logLvlMax\u003d function (lvl) {\n\tvar r\u003d LibRt.LogLvlMax;\n\tLogLvlMax\u003d LibRt.LogLvlMax\u003d lvl;\n\treturn r;\n}\n\nlogm\u003d function(t,lvl,msg,o) { //D: usar SOLO esta funcion de log (t es DBG, NFO o ERR ; lvl es 0 para importantisimo y 9 para irrelevante, o es un objeto que se serializa (ej. diccionario)\n\tif (lvl\u003c\u003dLogLvlMax) {\n\t\tLibRt.logm(t,lvl,msg+\":\"+(o ? ser_json(o) : \"\"),null);\n\t}\n}\n\nlogmAndThrow\u003d function (t,lvl,msg,o) {\n\tlogm(t,lvl,msg,o);\n\tthrow({message: msg, data: o});\n}\n\nexceptionToString\u003d function (ex) {\n\tvar es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n\tif (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n\telse {\n\t\tif (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n\t\tif (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n\t}\n\treturn es;\n}\n\nlogmex\u003d function(t,lvl,msg,o,ex) {\n\tvar es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n\tif (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n\telse {\n\t\tif (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n\t\tif (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n\t}\n\tif (\"getScriptStackTrace\" in ex) { es+\u003d\" \"+ex.getScriptStackTrace(); }\n\tif (\"details\" in ex) { es+\u003d\" \"+ex.details(); }\n\tif (\"javaException\" in ex) { es+\u003d\" \"+ex.javaException; }\n\tlogm(t,lvl,msg+\" EXCEPTION \"+es,o);\n}\n\n\n//*****************************************************************************\n//S: cargar archivos javascript\nruntimePath\u003d function () { return LibRt.runtimePath() }\nJSLIB\u003d[LibRt.runtimePath()+\"/../lib/js\",LibRt.runtimePath()+\"/lib/js\",\"lib/js\",\".\"]; //U: directorios donde buscar\nload\u003d function(path) { //D: lee un archivo y lo evalua\n\tvar isLoaded\u003d false;\n\tvar evalException\u003d null; //U: si dio una excepcion por error de syntaxis, reportarla\n\tvar tryPath\u003d path;\n\ttry {\n\t\tlogm(\"DBG\",7,\"RT JS LOAD TRYING PATH\",{requiredFile: path, path: tryPath, LibRtMyEnv: String(GLOBAL.LibRtMyEnv)});\n\t\tisLoaded\u003d (null!\u003d LibRt.jsLoad(path,GLOBAL.LibRtMyEnv||null,ARGV));\n\t}\n\tcatch (ex) {\n\t\tevalException\u003d ex;\n\t\tlogmex(\"DBG\",7,\"RT JS LOAD TRYING PATH\",{requiredFile: path, path: path},ex);\n\t\tif (ex.javaException instanceof java.io.FileNotFoundException) { //A: no encontro, probar otro path\n\t\t\tif (path.charAt(0)!\u003d\"/\" \u0026\u0026 path.charAt(0)!\u003d\".\") { //A: es relativo a rt o lib\n\t\t\t\tfor (var i\u003d0; !isLoaded \u0026\u0026 i\u003c JSLIB.length; i++) {\n\t\t\t\t\tvar tryPath\u003d JSLIB[i]+\"/\"+path;\n\t\t\t\t\tlogm(\"DBG\",7,\"RT JS LOAD TRYING PATH IN JSLIB\",{requiredFile: path, path: tryPath, LibRtMyEnv: String(GLOBAL.LibRtMyEnv)});\n\t\t\t\t\ttry {\n\t\t\t\t\t\tisLoaded\u003d (null!\u003d LibRt.jsLoad(tryPath,GLOBAL.LibRtMyEnv||null,ARGV));\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ex) {\n\t\t\t\t\t\tevalException\u003d ex;\n\t\t\t\t\t\tlogmex(\"DBG\",7,\"RT JS LOAD TRYING PATH IN JSLIB\",{requiredFile: path, path: tryPath},ex);\n\t\t\t\t\t\tif (ex.javaException instanceof java.io.FileNotFoundException) { //A: no encontro, probar otro path\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse { break; } //A: es error de sintaxis o evaluacion, paramos aca\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!isLoaded) {\n\t\tif (evalException \u0026\u0026 ! (evalException.javaException instanceof java.io.FileNotFoundException)) {\n\t\t\tlogmex(\"ERR\",1,\"RT JS LOAD SCRIPT EVAL ERROR\",{requiredFile: String(path), JSLIB: JSLIB}, evalException);\n\t\t\tthrow(evalException);\n\t\t}\n\t\telse {\n\t\t\tlogmAndThrow(\"ERR\",1,\"RT JS LOAD SCRIPT NOT FOUND\",{requiredFile: String(path), JSLIB: JSLIB});\n\t\t}\n\t}\n\telse {\n\t\tlogm(\"DBG\",7,\"RT JS LOAD OK\",{requiredFile: path, path: tryPath});\n\t}\n}\n\nrequire\u003d load;\n\nloadDir\u003d function(path) {\n\tlogm(\"NFO\",2,\"RT JS LOADDIR START\",{path:path, files: l});\n\tvar l\u003d get_filelist(path).sort();\n\tlogm(\"DBG\",2,\"RT JS LOADDIR LIST\",{path:path, files: l});\n\tl.map(function (e) { load(path+\"/\"+e); });\n\tlogm(\"NFO\",2,\"RT JS LOADDIR END\",{path:path, files: l});\n}\n\n//*****************************************************************************\n//S: comun para todos\nload(\"lib.js\");\n\n//*****************************************************************************\n//S: marshalling\ntoJs \u003d function (o) { //U: aplicar a los valores que vienen de java y pueden ser \"boxes\"\n\tif (o !\u003d null \u0026\u0026 o.getClass !\u003d null) {\n\t\tvar c \u003d String(o.getClass().getName());\n\t\t\n\t\tif (c \u003d\u003d \"java.lang.Integer\" || c \u003d\u003d \"java.lang.Long\" ) {\n\t\t\treturn o.longValue() + 0;\n\t\t} else if (c \u003d\u003d \"java.lang.Double\" || c \u003d\u003d \"java.lang.Float\" || c \u003d\u003d \"java.math.BigDecimal\") {\n\t\t\treturn o.doubleValue() + 0;\n\t\t} else if (c \u003d\u003d \"java.lang.String\" || c \u003d\u003d \"org.mozilla.javascript.ConsString\") {\n\t\t\treturn String(o);\n\t\t} else if (c \u003d\u003d \"[B\") {\n\t\t\treturn String(java.lang.String(o));\n\t\t} else if (c.indexOf(\"Set\") \u003e -1) {\n\t\t\treturn o.toArray();\n\t\t} else if (o.hasMoreElements) {\n\t\t\tvar r \u003d [];\n\t\t\twhile (o.hasMoreElements()) {\n\t\t\t\tr.push(toJs(o.nextElement()));\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t} else if (typeof (o) \u003d\u003d \"string\") {\n\t\treturn String(o);\n\t} //XXX:rhino17 llama \"string\" a cosas que no tienen metodo replace :P\n\t//logm(\"DBG\",9,\"TOJS java DFLT\",typeof(o))\n\treturn o;\n}\n\n//*****************************************************************************\n//S: ambiente\nget_env\u003d function (name) {\n\treturn java.lang.System.getenv(name);\n}\n\n//*****************************************************************************\n//S: archivos\nget_resource\u003d function(path,dflt) { //D: lee una archivo en un string\n\treturn (String(LibRt.get_resource(path))); \n}\n\nget_file\u003d function(path,dflt) { //D: lee una archivo en un string\n\treturn (String(LibRt.get_file(path,false,null,null))); \n}\n\ngetBin_file\u003d function(path,dflt) { //D: lee una archivo en un string\n\treturn (LibRt.get_file(path,false,null,null)); \n}\n\nset_file\u003d function(path,str,gzip,digestCalc,encoding) {\n\treturn LibRt.set_file(path,str,gzip!\u003dnull,digestCalc || null,encoding||null );\n}\n\nget_filelist\u003d function (path) {\n\treturn LibRt.get_filelist(path,false,false).map(function (x) { return String(x);}); //XXX:mejorar tipos de datos\n}\nkeys_file\u003d get_filelist;\n\nget_filelist_newer_int\u003d function (dir,after,regex) {\n\tvar l\u003d parseint_map(get_filelist(dir),regex).sort(function (a,b) { return a[1]-b[1]; });\n\tvar i\u003d0;\n\twhile (i\u003cl.length \u0026\u0026 l[i][1]\u003c\u003dafter){ i++; };\t\n\treturn {files: l, newerIdx: i, after: after};\n}\n\n//*****************************************************************************\n//S: archivos/operaciones\nmove_file\u003d function(src,dst,wantsOverwrite) {\n\tif (wantsOverwrite \u0026\u0026 exists_file(dst)) { delete_file(dst); }\n\treturn java.nio.file.Files.move(java.nio.file.Paths.get(src),java.nio.file.Paths.get(dst));\t\n}\n\ncopy_file\u003d function(src,dst) {\n\treturn java.nio.file.Files.copy(java.nio.file.Paths.get(src),java.nio.file.Paths.get(dst));\t\n}\n\nexists_file\u003d function(path) {\n\tvar f\u003d new java.io.File(path);\n\treturn f \u0026\u0026 f.exists() \u0026\u0026 (f.isDirectory() ? \"dir\" : \"file\");\n}\n\nensure_dir\u003d function(path) {\n\tvar parts\u003d path.split(/[\\/\\\\]/);\n\tlogm(\"DBG\",9,\"FS DIR PARTES\",{parts: parts, de: path});\n\tfor (var i\u003d0; i\u003cparts.length; i++) {\n\t\tvar partPath\u003d parts.slice(0,i+1).join(\"/\");\n\t\tif (exists_file(partPath)!\u003d\"dir\") {\n\t\t\tlogm(\"NFO\",5,\"FS DIR CREAR PARTE\",{parte: partPath, de: path, i: i});\n\t\t\tvar f\u003d new java.io.File(partPath);\n\t \t\tf.mkdir()\n\t\t}\n\t\telse {\n\t\t\tlogm(\"DBG\",9,\"FS DIR EXISTE PARTE\",{parte: partPath, de: path, i: i});\n\t\t}\n\t}\n\tlogm(\"NFO\",5,\"FS DIR CREAR OK\",{parte: partPath, de: path, i: i});\n}\n\ndelete_file\u003d function(path) {\n\treturn java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get(path));\t\n}\n\n//*****************************************************************************\n//S: archivos/CSV\nfold_file_csv\u003dfunction (file,cb,acc,digestCalc,isGzip) {\n\tisGzip\u003d isGzip || /\\gz(ip)?$/.exec(file) || false;\n\tvar r\u003d LibRt.fileReader(file,isGzip\u003d\u003dtrue,digestCalc||null); //XXX:checksum\n\tvar l\u003d r.readLine();\n\twhile (l) {\n\t\tvar cols\u003d (String(l)).split(\"\\t\");\n\t\tlogm(\"DBG\",9,\"CSV READ ROW COLS\",cols);\n\t\tvar x\u003d cb(cols,acc)\n\t\tl\u003d r.readLine();\n\t}\n\tr.close();\n\treturn acc;\n}\ncsvEach_file\u003d fold_file_csv; //XXX:deprecate\n\nfoldkv_file_csv\u003d function (path,cb,acc,digestCalc,isGzip) {\n\tvar names\u003d null; var row\u003d 0;\n\treturn fold_file_csv(path,function (cols) {\n\t\tif (!names) { names\u003d cols.map(function (k) { return k.toLowerCase() }); }\n\t\telse { \n\t\t\tvar val \u003d zipkv(names,cols); \n\t\t\tlogm(\"DBG\",9,\"CSV ROW VAL\",{row: row, val: val});\n\t\t\tacc\u003d cb(val,acc);\n\t\t\trow++;\n\t\t}\n\t\treturn acc;\n\t},acc,digestCalc,isGzip);\n}\n\n//*****************************************************************************\n//S: controlar procesos externos\nsystemRun\u003d function(cmdArray,nowait) { //D: ejecuta un comando en el shell del sistema\n\t//XXX:SEC parametros, expansion, etc.\n\tlogm(\"DBG\",1,\"SYS EXECUTE\",{cmd: cmdArray});\n\tvar p\u003d java.lang.Runtime.getRuntime().exec(cmdArray);\n\tvar r\u003d p; //DFLT devolvemos el process\n\tif (!nowait) { r\u003d p.waitFor(); } //A: pidio esperar, devolvemos el exit code\n\treturn r;\n}\n\nsystemRunWithOutput \u003d function(cmdArray) { //D: ejecuta un comando en el shell del sistema\n\t//XXX:SEC parametros, expansion, etc.\n\tvar p\u003d systemRun(cmdArray,true); //A: pedi el proceso y que NO espere\n\tr\u003d {};\n\tr.output\u003d LibRt.get_stream(p.getInputStream());\n\tr.result\u003d p.waitFor();\n\treturn r;\n};\n\n//*****************************************************************************\n//S: bases de datos\n\nfunction dbCxJdbc(cxInfo,forceReconnect) { //D: crea o recupera una conexion a la base de datos\n\tvar props\u003d new java.util.Properties()\n\tprops.put(\"user\",cxInfo.user);\n\tprops.put(\"password\",cxInfo.pass);\n\n\tvar cx;\n\ttry {\n\t\tif (cxInfo.url.match(/:oracle:/)) {\n\t\t\tvar x\u003d Packages.oracle.jdbc.driver.OracleDriver;\n\t\t\tprops.put(\"oracle.jdbc.ReadTimeout\",60000);\n\t\t\tprops.put(\"oracle.jdbc.READ_TIMEOUT\",60000);\n\t\t\tprops.put(\"oracle.net.CONNECT_TIMEOUT\",60000);\n\t\t} else if (cxInfo.url.match(/:h2:/)) {\n\t\t\tvar x\u003d Packages.org.h2.Driver;\n\t\t} else if (cxInfo.url.match(/:sqlite:/)) {\n\t\t\tvar x\u003d Packages.org.sqlite.JDBC;\n\t\t} else if (cxInfo.url.match(/:postgresql:/)) {\n\t\t\tvar x\u003d Packages.org.postgresql.Driver;\n\t\t}\n\t\t//A: cargamos la clase del driver segun al url //XXX:solo las que conocemos\n\n\t\tcx\u003d java.sql.DriverManager.getConnection(cxInfo.url, props);\n\t}\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"DB CONECTANDO\",cxInfo,ex);\n\t\tthrow(ex);\n\t}\n\treturn cx;\n}\n\nsync\u003d function (fun) { //A: envuelve fun para que solo entre UN thread simultaneo\n\t//VER: https://mozilla.github.io/rhino/javadoc/org/mozilla/javascript/Synchronizer.html\n\treturn new Packages.org.mozilla.javascript.Synchronizer(fun); \n}\n\ndbCxPoolDataSource\u003d sync(function (cxInfo,forceReconnect) { //A:sync, solo un thread por vez!\n\tvar ds;\n\ttry {\n\t\tds\u003d LibRt.state.get(\"DbCxPoolDataSource\"); //XXX:MAURICIO:encapsular para que no se vea LibRt y poder cambiar la implementacion cuando queramos\n\t\tif (!ds || forceReconnect) { \n\t\t\tvar config \u003d new Packages.com.zaxxer.hikari.HikariConfig();\n\t\t\tconfig.addDataSourceProperty(\"cachePrepStmts\", \"true\"); //XXX:hace configurable desde cxInfo, cantidad de cx, etc.\n\t\t\tconfig.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n\t\t\tconfig.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n\n\t\t\tconfig.setUsername(cxInfo.user);\n\t\t\tconfig.setPassword(cxInfo.pass);\n\n\t\t\tif (cxInfo.url.match(/:oracle:/)) { //XXX:generalizar con el de dbCx\n\t\t\t\tvar x\u003d Packages.oracle.jdbc.driver.OracleDriver;\n\t\t\t\t//props.put(\"oracle.jdbc.ReadTimeout\",60000);\n\t\t\t\t//props.put(\"oracle.jdbc.READ_TIMEOUT\",60000);\n\t\t\t\t//props.put(\"oracle.net.CONNECT_TIMEOUT\",60000);\n\t\t\t} else if (cxInfo.url.match(/:h2:/)) {\n\t\t\t\tvar x\u003d Packages.org.h2.Driver;\n\t\t\t} else if (cxInfo.url.match(/:sqlite:/)) {\n\t\t\t\tvar x\u003d Packages.org.sqlite.JDBC;\n\t\t\t} else if (cxInfo.url.match(/:postgresql:/)) {\n\t\t\t\tvar x\u003d Packages.org.postgresql.Driver;\n\t\t\t}\n\t\t\t//A: cargamos la clase del driver segun al url //XXX:solo las que conocemos\n\t\t\tconfig.setJdbcUrl(cxInfo.url);\n\t\t\tds\u003d new Packages.com.zaxxer.hikari.HikariDataSource(config);\n\t\t\tLibRt.state.put(\"DbCxPoolDataSource\",ds);\n\t\t}\n\t}\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"DB DATASOURCE\",cxInfo,ex);\n\t\tthrow(ex);\n\t}\n\tlogm(\"DBG\",7,\"DB DATASOURCE\",{cxInfo: cxInfo, ds: ds!\u003dnull});\n\treturn ds;\n});\n\ndbCxPool\u003d function (cxInfo,forceReconnect) { //D: crea o recupera una conexion a la base de datos\n\t//VER: https://github.com/brettwooldridge/HikariCP\n\tvar cx\u003d null; //A: DFLT, no conseguimos\n\ttry {\n\t\tcx\u003d dbCxPoolDataSource(cxInfo,forceReconnect).getConnection();\n\t}\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"DB CONECTANDO\",cxInfo,ex);\n\t\tthrow(ex);\n\t}\n\tlogm(\"DBG\",7,\"DB dbCxPool\",{cxInfo: cxInfo, cx: cx!\u003dnull});\n\treturn cx;\n}\n\ndbCx\u003d dbCxPool;\n\nfunction dbParse(sql) { //D: parsea WHERE ?miparam1:String\u003d\u0027pepe\u0027 AND ?miparam2\u003e5 para dbExec\n\tvar re\u003d/\\$([a-zA-Z0-9_]*)(?::([a-zA-Z]*))?/g\n\tvar names\u003d[]; var types\u003d{};\n\t//logm(\"DBG\",1,\"XXX\",typeof(sql));\n\tvar sqlSinComments\u003d delete_marked_str(sql,\"/*\",\"*/\"); //A: borramos los comentarios\n\tvar sqlclean\u003d sqlSinComments.replace(/;\\s*$/,\"\").replace(/\\r?\\n/g,\" \"); //XXX:manejar para distintos drivers\n\t\n\tvar sqlstd\u003d sqlclean.replace(re,function (exprParametro,nx,t) { \n\t\tvar reemplazo\u003d \"?\"; //DFLT\n\t\tvar n\u003d nx.toLowerCase(); \n\t\tvar tipo\u003d types[n] || { nombre: t, loPuedeManejarElDriver: true};  //DFLT //U: el tipo del parametro\n\t\t//XXX:HERNAN podriamos agregar un caso para los dates\n\t\tif (t\u003d\u003d\"SqlListaDeNumeros\") { //A: caso especial, hay que GENERAR sql\n\t\t\treemplazo\u003d exprParametro;\n\t\t\ttipo.loPuedeManejarElDriver\u003d false;\n\t\t}\n\t\telse if (t\u003d\u003d\"SqlListaDeStrings\") {//A: caso especial, hay que GENERAR sql\n\t\t\treemplazo\u003d exprParametro;\n\t\t\ttipo.loPuedeManejarElDriver\u003d false;\n\t\t} \n\t\telse if (t\u003d\u003d\"blob\") {\n\t\t\ttipo.nombre \u003d \"blob\";\n\t\t\ttipo.loPuedeManejarElDriver \u003d true;\n\t\t} else if (t \u003d\u003d \"likeString\") { //A: like \"\u0027%MIVALOR%\u0027\"\n\t\t\treemplazo\u003d exprParametro;\n\t\t\ttipo.loPuedeManejarElDriver\u003d false;\t\n\t\t}\n\t\telse { //A: caso estandard, la funcion de parametros del driver nos sirve\n\t\t}\n\t\tnames.push(n); \n\t\ttypes[n]\u003d tipo; \n\t\treturn reemplazo;\n\t});\t\n\treturn { sql: sql, sqlstd: sqlstd, names: names, types: types};\n}\n\ndbExecSqlParaDriver\u003d function(cx,dbs,paramsKvNorm) { //U: devuelve el sql que el driver entiende despues de aplicar nuestras mejoras, ej. generar lista de numeros para un where xxx in ...\n\t//U: recibe CX para poder averiguar el tipo de conexion (Oracle, Postgress, etc.) y generar el sql correspondiente\n\tvar sqlParaDriver\u003d dbs.sqlstd; //DFLT\n\tfor (var i\u003d0; i\u003cdbs.names.length; i++) { \n\t\tvar esteNombre\u003d dbs.names[i];\n\t\tvar esteTipo\u003d dbs.types[esteNombre];\n\t\tlogm(\"DBG\",9,\"dbExecSqlParaDriver\",{dbs: dbs, idx: i, esteNombre: esteNombre, esteTipo: esteTipo});\n\t\tif (esteTipo.nombre\u003d\u003d\"SqlListaDeNumeros\") { //A: requiere modificar el sql\n\t\t\tvar valor\u003d paramsKvNorm[esteNombre]; //XXX: considerar que sea nulo, poner un cartelito de log lindo para no debugguear mil horas si nos pasa\n\t\t\tvar sqlDeReemplazo\u003d valor.join(\",\");\n\t\t\tsqlParaDriver\u003d sqlParaDriver.replace(new RegExp(\"\\\\$\"+esteNombre+\":\"+esteTipo.nombre,\"gi\"),sqlDeReemplazo);\n\t\t} else if (esteTipo.nombre\u003d\u003d\"likeString\") {\n\t\t\tvar valor\u003d paramsKvNorm[esteNombre];\n\t\t\tvar sqlDeReemplazo\u003d (\"\u0027%VALOR%\u0027\").replace(\u0027VALOR\u0027,valor);\n\t\t\tsqlParaDriver \u003d sqlParaDriver.replace(new RegExp(\"\\\\$\"+esteNombre+\":\"+esteTipo.nombre,\"gi\"),sqlDeReemplazo);\n\t\t}\n\t}\n\tlogm(\"DBG\",8,\"dbExecSqlParaDriver FIN\",{dbs: dbs, idx: i, esteNombre: esteNombre, esteTipo: esteTipo, sqlParaDriver: sqlParaDriver});\n\treturn sqlParaDriver;\n}\n\nfunction dbExecImpl(cx,sql,paramsKv) { //D: NO USAR, comun a las publicas\n\tvar dbs\u003d dbParse(sql);\n\tlogm(\"DBG\",7,\"DB EXEC 0\",{dbs: dbs, params: paramsKv});\n\ttry {\n\n\t\tvar paramsKvNorm\u003d fold(paramsKv,function (v,k,acc) { acc[k.toLowerCase()]\u003d v; return acc; },{}); //A: todos los parametros tienen nombre en minuscula\n\t\tvar sqlParaDriver\u003d dbExecSqlParaDriver(cx,dbs,paramsKvNorm);\n\t\t//A: el sql que tengo se lo puedo enviar al driver\n\n\t\tvar DANGER_SQL_SOLO_PARA_DEBUG\u003d sqlParaDriver;\n\t\t//A: voy a armar uno con parametros instanciados para LOGUEAR (NUNCA PARA EJECUTAR!)\n\n\t\tvar stmt\u003d cx.prepareStatement(sqlParaDriver);\n\t\tvar paramIdx\u003d1; //A: los que efectivamente pasamos con \"set*\", no contamos las expresiones que generaron sql. JDBC empieza de 1\n\t\tfor (var i\u003d0; i\u003cdbs.names.length; i++) {try{ \n\t\t\tvar esteNombre\u003d dbs.names[i];\n\t\t\tvar esteTipo\u003d dbs.types[esteNombre];\n\t\t\tif (esteTipo.nombre \u003d\u003d \"blob\") {\n\t\t\t\tlogm(\"DBG\", 9, \"DB TIPO BLOB\", { nombre : esteNombre, tipo: esteTipo});\n\t\t\t\tvar str \u003d paramsKvNorm[esteNombre];\n\t\t\t\tvar src \u003d enc_base64_r(str);\n\t\t\t\tstmt.setBytes(paramIdx, src); paramIdx++;\n\t\t\t} else if (esteTipo.loPuedeManejarElDriver) {\n\t\t\t\tvar v\u003d paramsKvNorm[esteNombre]; //DFLT\n\t\t\t\tif (v) { //A: no es null\n\t\t\t\t\tvar x\u003d parseFloat(v); //A: si podemos lo concertimos a numero, despues setObject se ocupa\n\t\t\t\t\tif (!isNaN(x) \u0026\u0026 (x+\"\")\u003d\u003dv) { v\u003d x; } //A: lo pudimos convertir y NO cambio (sino se rompe ej. 002 como prefijo, que se convierte incorrectamente en 2)\n\t\t\t\t}\n\t\t\t\tif (v!\u003dnull \u0026\u0026 esteTipo.nombre \u0026\u0026 esteTipo.nombre!\u003dtypeof(v)) { //A: pidieron un tipo y no es el de v\n\t\t\t\t\tlogm(\"WRN\", 5, \"DB TIPO INCORRECTO\", { nombre : esteNombre, tipoDeseado: esteTipo, tipoRecibido: typeof(v), valor: v});\n\t\t\t\t}\n\t\t\t\tstmt.setObject(paramIdx,v); paramIdx++; //XXX:asegurarse que llega el tipo correcto a JDBC\n\t\t\t\tDANGER_SQL_SOLO_PARA_DEBUG\u003d DANGER_SQL_SOLO_PARA_DEBUG.replace(\u0027?\u0027,\"\u0027\"+v+\"\u0027\");\n\t\t\t}\n\t\t}catch(ex1){logmex(\"ERR\",1,\"DB EXEC 1 ARG\",{nombre: esteNombre, tipo: esteTipo, valor: v, idx: i+1, sql: sqlParaDriver, sqlDbg: DANGER_SQL_SOLO_PARA_DEBUG },ex1);throw(ex1)}}\n\t\tstmt.execute();\n\t\tlogm(\"DBG\",7,\"DB EXEC 1\",{executed: \"OK\", sqlDbg: DANGER_SQL_SOLO_PARA_DEBUG, sqlParaDriver: sqlParaDriver, dbs: dbs, params:paramsKv});\n\t}\n\tcatch(ex2){logmex(\"ERR\",2,\"DB EXEC 1\",{executed: \"FAIL\", sqlParaDriver: sqlParaDriver, dbs: dbs, params: paramsKv},ex2); throw(ex2); }\n\treturn stmt;\n}\t\n\nfunction dbExec(cx,sql,paramsKv) { //D: ejecuta actuliazacion, devuelve nro filas actualizadas o -1\n\tvar r\u003d -1;\n\tvar stmt\u003d dbExecImpl(cx,sql,paramsKv);\n\tif (stmt) {\n\t\tr\u003d stmt.getUpdateCount();\n\t\tstmt.close();\t\n\t}\n\treturn r;\n}\n\ndbQuery\u003d function (cx,sql,paramsKv) { //D: ejecuta una consulta, devuelve el resulset o null\n\tvar r;\n\tvar stmt\u003d dbExecImpl(cx,sql,paramsKv);\n\tif (stmt) {\n\t\tr\u003d stmt.getResultSet();\n\t}\n\treturn r;\n}\n\ndbNextRowArray\u003d function (rs,cols) {\n\tvar d;\n\tcols\u003d cols || LibRt.dbRsColumnNames(rs);\n\tif (rs.next()) {\n\t\td\u003d [];\n\t\tfor (var i\u003d0; i\u003ccols.length; i++) { d[i]\u003d toJs(rs.getObject(i+1)); }\n\t\tlogm(\"DBG\",9,\"DB RS ROW dbNextRowArray\",{d:d, cols: cols});\n\t}\n\telse {\n\t\tlogm(\"DBG\",9,\"DB RS ROW EMPTY dbNextRowArray\",{d:d, cols: cols});\n\t}\n\treturn d;\n}\n\n\ndbNextRowKv\u003d function (rs,cols) {\n\tvar d;\n\tcols\u003d cols || LibRt.dbRsColumnNames(rs);\n\tif (rs.next()) {\n\t\td\u003d {};\n\t\tfor (var i\u003d0; i\u003ccols.length; i++) { d[cols[i]]\u003d toJs(rs.getObject(i+1)); }\n\t\tlogm(\"DBG\",9,\"DB RS ROW dbNextRowKv\",{d:d, cols: cols});\n\t}\n\telse {\n\t\tlogm(\"DBG\",9,\"DB RS ROW EMPTY dbNextRowKv\",{d:d, cols: cols});\n\t}\n\treturn d;\n}\n\nfunction dbQueryOne(cx,sql,paramsKv,dflt) {\n\tvar r\u003d dflt;\n\tvar rs\u003d dbQuery(cx,sql,paramsKv);\n\tif (rs.next()) { r\u003d toJs(rs.getObject(1)); }\n\trs.close();\n\treturn r;\n}\n\nfunction dbQueryFirstKv(cx,sql,paramsKv,dflt) {\n\tvar rs\u003d dbQuery(cx,sql,paramsKv);\n\tvar r\u003d (rs \u0026\u0026 dbNextRowKv(rs)) || dflt;\n\trs.close();\n\treturn r;\n}\n\ndbRowsForSql\u003d function (sql,params) { //U: devuelve un array de arrays, uno para cada fila\n\tvar rs\u003d dbQuery(cx(),sql,params); var acc\u003d [];\n\twhile (d\u003d dbNextRowArray(rs)) { acc.push(d); }\n\treturn acc;\n}\n\ndbRowsForQuery\u003d function (query,params,cfgReprDb) { //U: devuelve un array de arrays, uno para cada fila\n\tvar sql\u003d reprDbSqlFor(query,cfgReprDb);\n\treturn dbRowsForSql(sql,params);\n}\n\ndbKvOfKvForQuery\u003d function (q,keyCol,params) {\n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n  var acc \u003d {};\n  while (d \u003d dbNextRowKv(rs)) { acc[d[keyCol]] \u003d d; } //XXX:GEN:dict-\u003eID-\u003ekv fila\n  return acc;\n}\n\ndbKvOfValForQuery\u003d function (q,keyCol,valCol,params) {\n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n  var acc \u003d {};\n  while (d \u003d dbNextRowKv(rs)) { acc[d[keyCol]] \u003d d[valCol]; } //XXX:GEN:dict-\u003eID-\u003evalor\n  return acc;\n}\n\ndbKvOfArrForQuery\u003d function (q,keyCol,params) { \n\t//XXX:GENERALIZAR:en todas se trata de averiguar las cols al principio, leer arrays, elegir algunos elementos Y seria suficiente que este coordinado entre cliente y servidor (generado) para usar cualquiera\n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n  var acc \u003d {};\n\tvar d;\n  while (d \u003d dbNextRowArray(rs)) { acc[d[keyCol]] \u003d d.slice(0,keyCol).concat(d.slice(keyCol+1)); } //XXX:GEN:dict-\u003eID-\u003eArray\n  return acc;\n}\n\ndbKvOfGroupForQuery\u003d function (q,keyCol,params) { \n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n\tvar r\u003d {};\n\tvar d;\n\twhile (d \u003d dbNextRowKv(rs)) {\n\t\tvar key\u003d d[keyCol];\n\t\tif(!r[key]) { r[key] \u003d []; }\n\t\tr[key].push(d);\n\t}\n\n\treturn r;\n};\n\ndbKvOfGroupArrForQuery\u003d function (q,keyCol,params) { \n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n\tvar r\u003d {};\n\tvar d;\n\twhile (d \u003d dbNextRowArray(rs)) {\n\t\tvar key\u003d d[keyCol];\n\t\tif(!r[key]) { r[key] \u003d []; }\n\t\tr[key].push(d.slice(0,keyCol).concat(d.slice(keyCol+1)));\n\t}\n\n\treturn r;\n};\n\ndbKvOfGroupPushForQuery\u003d function (q,keyCol,params) { \n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n\tvar r\u003d {};\n\tvar d;\n\twhile (d \u003d dbNextRowArray(rs)) {\n\t\tvar key\u003d d[keyCol];\n\t\tif(!r[key]) { r[key] \u003d []; }\n\t\tfold(d,function (e,i) { i!\u003dkeyCol \u0026\u0026 r[key].push(e) });\n\t}\n\treturn r;\n};\n\n\n\n//SEE: http://www.tutorialspoint.com/jdbc/jdbc-transactions.htm\nfunction dbTxAutoCommit(cx,wantsActive) {\n\tcx.setAutoCommit(wantsActive);\n}\n\nfunction dbTxRollback(cx,savepoint) {\n\tcx.rollback();\n}\n\nfunction dbTxCommit(cx) {\n\tcx.commit();\n}\n\ndbSampleTables\u003d function (cx,pfx,tableNames) { //U: conseguir una muestra de tablas con su nombre\n\tcx\u003d cx || dbCx(cxcfg);\n\tfor (var i\u003d0; i\u003ctableNames.length; i++) { try { var tableName\u003d tableNames[i];\n\t\tvar rs\u003d dbQuery(cx,\"SELECT * from \"+tableName+\" WHERE ROWNUM\u003c10\");\n\t\tcnt\u003d LibRt.serRsCsvToFile(rs,null,pfx+tableName+\".dat\",-1,\"\\t\");\n\n\t\tcnt\u003d dbQueryOne(cx,\"SELECT count(*) cnt from \"+tableName);\n\t\tset_file(pfx+tableName+\".cnt\",cnt);\t\n\t} catch (ex) { set_file(pfx+tableName+\".err\",ex.message);\t\n\t\tlogmex(\"ERR\",1,\"DB SAMPLE TABLES\",{ tableName: tableName, idx: i},ex);\n\t} }\n}\n\n//*****************************************************************************\n//S: http / servlet\nwebRequestPath\u003d function (webRequest) {\n\treturn toJs(webRequest.getRequestURI())\n}\n\nwebRequestParam\u003d function (webRequest,k) {\n\tvar p\u003d toJs(webRequest.getParameter(k));\n\treturn p;\n}\n\nwebRequestParams\u003d function (webRequest) {\n\tvar cmdSrc\u003d webRequest.getParameterMap();\n\tvar cmd\u003d kvfirstMap(cmdSrc);\n\tlogm(\"NFO\",1,\"WEB REQUEST PARAMS\",{ cmdSrc: cmdSrc, cmd: cmd});\n\treturn cmd;\n}\n\nwebRequestData\u003d function (webRequest) {\n\tvar s\u003d toJs(LibRt.get_stream(new java.io.BufferedReader( new java.io.InputStreamReader( webRequest.getInputStream()))));\n\tlogm(\"DBG\",9,\"WEB REQUEST DATA\",s);\n\treturn s;\n}\n\nwebRequestHeaders\u003d function (webRequest) {\n\tvar n\u003d webRequest.getHeaderNames();\n\tvar hdr\u003d fold(toJs(n),function (n,i,acc) { acc[n]\u003d toJs(webRequest.getHeader(n)); return acc; },{});\n\treturn hdr;\n}\n\nwebRequestAddr\u003d function (webRequest) {\n\treturn String(webRequest.getRemoteAddr());\n}\n\nwebResponseWrite\u003d function (webResponse,str) {\n\twebResponse.getWriter().write(str);\n}\n\n//*****************************************************************************\n//S: scripts\nfunction contador_file(path,value,wantsSet) { //D: contador persistene en un archivo\n\tvar cnt\u003d parseInt(get_file(path)||0);\n\tlogm(\"DBG\",1,\"COUNTER\",{cnt: cnt, path: path,wantsSet: wantsSet,valueOrDelta: value});\n\tif (value!\u003d0 || wantsSet) {\n\t\tset_file(path,wantsSet ? (value||0) : (cnt+value));\n\t}\n\treturn cnt;\n}\n\n\n" 
LOG:2016-02-24_13:22:47:DBG:9:RT JS EVAL START PATH=librt.js SRC:"//INFO: OCULTAR los detalles del runtime en una API estandard, igual en movil, java, C#, etc.\n\n//*****************************************************************************\n//S: basicos\nGLOBAL\u003d this; //D: referencia al ambiente global, ej para que sea accesible a closures\nGLOBAL.LibRt\u003d GLOBAL.LibRt || (GLOBAL.Packages ? Packages.LibRt : this) ;\nGLOBAL.rtType\u003d \"java\";\n\n//*****************************************************************************\n//S: compatibilidad rhino/jdk\nprint\u003d this.print || function (m) { java.lang.System.out.println(m); }\n//*****************************************************************************\n//S: compatibilidad con el browser\nconsole\u003d {};\nconsole.log\u003d function (m) { logm(\"DBG\",1,m); }\nwindow\u003d this;\nshowMsg\u003d function (m) { logm(\"DBG\",1,m); }\nsetTimeout\u003d function (cb) { logm(\"ERR\",1,\"setTimeout SOLO FUNCIONA dentro de runWithTimer\"); }\nsetInterval\u003d function (cb) { logm(\"ERR\",1,\"setTimeout SOLO FUNCIONA dentro de runWithTimer\"); }\n\nrunWithTimer\u003d function (f) { //U: agrega setTimeout y setInterval SOLO DENTRO de la funcion f\n\tload(\u0027libBrowserTimer.js\u0027);\n\tvar timerLoop \u003d makeWindowTimer(this, java.lang.Thread.sleep);\n\t//A: tenemos emulacion para setTimeout en el servidor\n\tf();\n\ttimerLoop();\n}\n\ncxAjaxCall\u003d function(rpcOpts, params, cb,cbError) {\n\tvar r\u003d null;\n\ttry { var f\u003d GLOBAL[rpcOpts.funName]; r\u003d f(params); }\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"CX AJAX CALL\",{rpcOpts: rpcOpts, params: params},ex);\t\n\t\tr\u003d {LibCxException: exceptionToString(ex)};\n\t}\n\tsetTimeout(function () { cb(r); },0); //XXX: emular para tests\n}\n//A: emulamos ajax desde cliente\n\n\n\n\n//*****************************************************************************\n//S: serializacion\nser_json\u003d function (o,wantsPretty) {\n\tvar s;\n\tif (o!\u003dnull) {\n\t\ttry { s\u003d JSON.stringify(o,null,wantsPretty ? 2 : null); }\n\t\tcatch (ex) { s\u003dString(o); }\n\t}\n\telse {\n\t\ts\u003d\"null\";\n\t}\n\treturn s;\n}\n\nenc_base64\u003d function (val) {\n\treturn javax.xml.bind.DatatypeConverter.printBase64Binary(new java.lang.String(val).getBytes(\"ISO-8859-1\"));\n}\n\nenc_base64_r\u003d function (base64str) {\n\tvar bytes\u003d javax.xml.bind.DatatypeConverter.parseBase64Binary(base64str);\n\tvar dec\u003d new java.lang.String(bytes,\"ISO-8859-1\")+\"\";\n\treturn dec;\n}\n\n//*****************************************************************************\n//S: log\nLibRt.logInit(false); //A: asegurarse que el log este inicializado\nLogLvlMax\u003d LibRt.LogLvlMax;\nset_logLvlMax\u003d function (lvl) {\n\tvar r\u003d LibRt.LogLvlMax;\n\tLogLvlMax\u003d LibRt.LogLvlMax\u003d lvl;\n\treturn r;\n}\n\nlogm\u003d function(t,lvl,msg,o) { //D: usar SOLO esta funcion de log (t es DBG, NFO o ERR ; lvl es 0 para importantisimo y 9 para irrelevante, o es un objeto que se serializa (ej. diccionario)\n\tif (lvl\u003c\u003dLogLvlMax) {\n\t\tLibRt.logm(t,lvl,msg+\":\"+(o ? ser_json(o) : \"\"),null);\n\t}\n}\n\nlogmAndThrow\u003d function (t,lvl,msg,o) {\n\tlogm(t,lvl,msg,o);\n\tthrow({message: msg, data: o});\n}\n\nexceptionToString\u003d function (ex) {\n\tvar es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n\tif (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n\telse {\n\t\tif (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n\t\tif (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n\t}\n\treturn es;\n}\n\nlogmex\u003d function(t,lvl,msg,o,ex) {\n\tvar es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n\tif (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n\telse {\n\t\tif (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n\t\tif (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n\t}\n\tif (\"getScriptStackTrace\" in ex) { es+\u003d\" \"+ex.getScriptStackTrace(); }\n\tif (\"details\" in ex) { es+\u003d\" \"+ex.details(); }\n\tif (\"javaException\" in ex) { es+\u003d\" \"+ex.javaException; }\n\tlogm(t,lvl,msg+\" EXCEPTION \"+es,o);\n}\n\n\n//*****************************************************************************\n//S: cargar archivos javascript\nruntimePath\u003d function () { return LibRt.runtimePath() }\nJSLIB\u003d[LibRt.runtimePath()+\"/../lib/js\",LibRt.runtimePath()+\"/lib/js\",\"lib/js\",\".\"]; //U: directorios donde buscar\nload\u003d function(path) { //D: lee un archivo y lo evalua\n\tvar isLoaded\u003d false;\n\tvar evalException\u003d null; //U: si dio una excepcion por error de syntaxis, reportarla\n\tvar tryPath\u003d path;\n\ttry {\n\t\tlogm(\"DBG\",7,\"RT JS LOAD TRYING PATH\",{requiredFile: path, path: tryPath, LibRtMyEnv: String(GLOBAL.LibRtMyEnv)});\n\t\tisLoaded\u003d (null!\u003d LibRt.jsLoad(path,GLOBAL.LibRtMyEnv||null,ARGV));\n\t}\n\tcatch (ex) {\n\t\tevalException\u003d ex;\n\t\tlogmex(\"DBG\",7,\"RT JS LOAD TRYING PATH\",{requiredFile: path, path: path},ex);\n\t\tif (ex.javaException instanceof java.io.FileNotFoundException) { //A: no encontro, probar otro path\n\t\t\tif (path.charAt(0)!\u003d\"/\" \u0026\u0026 path.charAt(0)!\u003d\".\") { //A: es relativo a rt o lib\n\t\t\t\tfor (var i\u003d0; !isLoaded \u0026\u0026 i\u003c JSLIB.length; i++) {\n\t\t\t\t\tvar tryPath\u003d JSLIB[i]+\"/\"+path;\n\t\t\t\t\tlogm(\"DBG\",7,\"RT JS LOAD TRYING PATH IN JSLIB\",{requiredFile: path, path: tryPath, LibRtMyEnv: String(GLOBAL.LibRtMyEnv)});\n\t\t\t\t\ttry {\n\t\t\t\t\t\tisLoaded\u003d (null!\u003d LibRt.jsLoad(tryPath,GLOBAL.LibRtMyEnv||null,ARGV));\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ex) {\n\t\t\t\t\t\tevalException\u003d ex;\n\t\t\t\t\t\tlogmex(\"DBG\",7,\"RT JS LOAD TRYING PATH IN JSLIB\",{requiredFile: path, path: tryPath},ex);\n\t\t\t\t\t\tif (ex.javaException instanceof java.io.FileNotFoundException) { //A: no encontro, probar otro path\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse { break; } //A: es error de sintaxis o evaluacion, paramos aca\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!isLoaded) {\n\t\tif (evalException \u0026\u0026 ! (evalException.javaException instanceof java.io.FileNotFoundException)) {\n\t\t\tlogmex(\"ERR\",1,\"RT JS LOAD SCRIPT EVAL ERROR\",{requiredFile: String(path), JSLIB: JSLIB}, evalException);\n\t\t\tthrow(evalException);\n\t\t}\n\t\telse {\n\t\t\tlogmAndThrow(\"ERR\",1,\"RT JS LOAD SCRIPT NOT FOUND\",{requiredFile: String(path), JSLIB: JSLIB});\n\t\t}\n\t}\n\telse {\n\t\tlogm(\"DBG\",7,\"RT JS LOAD OK\",{requiredFile: path, path: tryPath});\n\t}\n}\n\nrequire\u003d load;\n\nloadDir\u003d function(path) {\n\tlogm(\"NFO\",2,\"RT JS LOADDIR START\",{path:path, files: l});\n\tvar l\u003d get_filelist(path).sort();\n\tlogm(\"DBG\",2,\"RT JS LOADDIR LIST\",{path:path, files: l});\n\tl.map(function (e) { load(path+\"/\"+e); });\n\tlogm(\"NFO\",2,\"RT JS LOADDIR END\",{path:path, files: l});\n}\n\n//*****************************************************************************\n//S: comun para todos\nload(\"lib.js\");\n\n//*****************************************************************************\n//S: marshalling\ntoJs \u003d function (o) { //U: aplicar a los valores que vienen de java y pueden ser \"boxes\"\n\tif (o !\u003d null \u0026\u0026 o.getClass !\u003d null) {\n\t\tvar c \u003d String(o.getClass().getName());\n\t\t\n\t\tif (c \u003d\u003d \"java.lang.Integer\" || c \u003d\u003d \"java.lang.Long\" ) {\n\t\t\treturn o.longValue() + 0;\n\t\t} else if (c \u003d\u003d \"java.lang.Double\" || c \u003d\u003d \"java.lang.Float\" || c \u003d\u003d \"java.math.BigDecimal\") {\n\t\t\treturn o.doubleValue() + 0;\n\t\t} else if (c \u003d\u003d \"java.lang.String\" || c \u003d\u003d \"org.mozilla.javascript.ConsString\") {\n\t\t\treturn String(o);\n\t\t} else if (c \u003d\u003d \"[B\") {\n\t\t\treturn String(java.lang.String(o));\n\t\t} else if (c.indexOf(\"Set\") \u003e -1) {\n\t\t\treturn o.toArray();\n\t\t} else if (o.hasMoreElements) {\n\t\t\tvar r \u003d [];\n\t\t\twhile (o.hasMoreElements()) {\n\t\t\t\tr.push(toJs(o.nextElement()));\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t} else if (typeof (o) \u003d\u003d \"string\") {\n\t\treturn String(o);\n\t} //XXX:rhino17 llama \"string\" a cosas que no tienen metodo replace :P\n\t//logm(\"DBG\",9,\"TOJS java DFLT\",typeof(o))\n\treturn o;\n}\n\n//*****************************************************************************\n//S: ambiente\nget_env\u003d function (name) {\n\treturn java.lang.System.getenv(name);\n}\n\n//*****************************************************************************\n//S: archivos\nget_resource\u003d function(path,dflt) { //D: lee una archivo en un string\n\treturn (String(LibRt.get_resource(path))); \n}\n\nget_file\u003d function(path,dflt) { //D: lee una archivo en un string\n\treturn (String(LibRt.get_file(path,false,null,null))); \n}\n\ngetBin_file\u003d function(path,dflt) { //D: lee una archivo en un string\n\treturn (LibRt.get_file(path,false,null,null)); \n}\n\nset_file\u003d function(path,str,gzip,digestCalc,encoding) {\n\treturn LibRt.set_file(path,str,gzip!\u003dnull,digestCalc || null,encoding||null );\n}\n\nget_filelist\u003d function (path) {\n\treturn LibRt.get_filelist(path,false,false).map(function (x) { return String(x);}); //XXX:mejorar tipos de datos\n}\nkeys_file\u003d get_filelist;\n\nget_filelist_newer_int\u003d function (dir,after,regex) {\n\tvar l\u003d parseint_map(get_filelist(dir),regex).sort(function (a,b) { return a[1]-b[1]; });\n\tvar i\u003d0;\n\twhile (i\u003cl.length \u0026\u0026 l[i][1]\u003c\u003dafter){ i++; };\t\n\treturn {files: l, newerIdx: i, after: after};\n}\n\n//*****************************************************************************\n//S: archivos/operaciones\nmove_file\u003d function(src,dst,wantsOverwrite) {\n\tif (wantsOverwrite \u0026\u0026 exists_file(dst)) { delete_file(dst); }\n\treturn java.nio.file.Files.move(java.nio.file.Paths.get(src),java.nio.file.Paths.get(dst));\t\n}\n\ncopy_file\u003d function(src,dst) {\n\treturn java.nio.file.Files.copy(java.nio.file.Paths.get(src),java.nio.file.Paths.get(dst));\t\n}\n\nexists_file\u003d function(path) {\n\tvar f\u003d new java.io.File(path);\n\treturn f \u0026\u0026 f.exists() \u0026\u0026 (f.isDirectory() ? \"dir\" : \"file\");\n}\n\nensure_dir\u003d function(path) {\n\tvar parts\u003d path.split(/[\\/\\\\]/);\n\tlogm(\"DBG\",9,\"FS DIR PARTES\",{parts: parts, de: path});\n\tfor (var i\u003d0; i\u003cparts.length; i++) {\n\t\tvar partPath\u003d parts.slice(0,i+1).join(\"/\");\n\t\tif (exists_file(partPath)!\u003d\"dir\") {\n\t\t\tlogm(\"NFO\",5,\"FS DIR CREAR PARTE\",{parte: partPath, de: path, i: i});\n\t\t\tvar f\u003d new java.io.File(partPath);\n\t \t\tf.mkdir()\n\t\t}\n\t\telse {\n\t\t\tlogm(\"DBG\",9,\"FS DIR EXISTE PARTE\",{parte: partPath, de: path, i: i});\n\t\t}\n\t}\n\tlogm(\"NFO\",5,\"FS DIR CREAR OK\",{parte: partPath, de: path, i: i});\n}\n\ndelete_file\u003d function(path) {\n\treturn java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get(path));\t\n}\n\n//*****************************************************************************\n//S: archivos/CSV\nfold_file_csv\u003dfunction (file,cb,acc,digestCalc,isGzip) {\n\tisGzip\u003d isGzip || /\\gz(ip)?$/.exec(file) || false;\n\tvar r\u003d LibRt.fileReader(file,isGzip\u003d\u003dtrue,digestCalc||null); //XXX:checksum\n\tvar l\u003d r.readLine();\n\twhile (l) {\n\t\tvar cols\u003d (String(l)).split(\"\\t\");\n\t\tlogm(\"DBG\",9,\"CSV READ ROW COLS\",cols);\n\t\tvar x\u003d cb(cols,acc)\n\t\tl\u003d r.readLine();\n\t}\n\tr.close();\n\treturn acc;\n}\ncsvEach_file\u003d fold_file_csv; //XXX:deprecate\n\nfoldkv_file_csv\u003d function (path,cb,acc,digestCalc,isGzip) {\n\tvar names\u003d null; var row\u003d 0;\n\treturn fold_file_csv(path,function (cols) {\n\t\tif (!names) { names\u003d cols.map(function (k) { return k.toLowerCase() }); }\n\t\telse { \n\t\t\tvar val \u003d zipkv(names,cols); \n\t\t\tlogm(\"DBG\",9,\"CSV ROW VAL\",{row: row, val: val});\n\t\t\tacc\u003d cb(val,acc);\n\t\t\trow++;\n\t\t}\n\t\treturn acc;\n\t},acc,digestCalc,isGzip);\n}\n\n//*****************************************************************************\n//S: controlar procesos externos\nsystemRun\u003d function(cmdArray,nowait) { //D: ejecuta un comando en el shell del sistema\n\t//XXX:SEC parametros, expansion, etc.\n\tlogm(\"DBG\",1,\"SYS EXECUTE\",{cmd: cmdArray});\n\tvar p\u003d java.lang.Runtime.getRuntime().exec(cmdArray);\n\tvar r\u003d p; //DFLT devolvemos el process\n\tif (!nowait) { r\u003d p.waitFor(); } //A: pidio esperar, devolvemos el exit code\n\treturn r;\n}\n\nsystemRunWithOutput \u003d function(cmdArray) { //D: ejecuta un comando en el shell del sistema\n\t//XXX:SEC parametros, expansion, etc.\n\tvar p\u003d systemRun(cmdArray,true); //A: pedi el proceso y que NO espere\n\tr\u003d {};\n\tr.output\u003d LibRt.get_stream(p.getInputStream());\n\tr.result\u003d p.waitFor();\n\treturn r;\n};\n\n//*****************************************************************************\n//S: bases de datos\n\nfunction dbCxJdbc(cxInfo,forceReconnect) { //D: crea o recupera una conexion a la base de datos\n\tvar props\u003d new java.util.Properties()\n\tprops.put(\"user\",cxInfo.user);\n\tprops.put(\"password\",cxInfo.pass);\n\n\tvar cx;\n\ttry {\n\t\tif (cxInfo.url.match(/:oracle:/)) {\n\t\t\tvar x\u003d Packages.oracle.jdbc.driver.OracleDriver;\n\t\t\tprops.put(\"oracle.jdbc.ReadTimeout\",60000);\n\t\t\tprops.put(\"oracle.jdbc.READ_TIMEOUT\",60000);\n\t\t\tprops.put(\"oracle.net.CONNECT_TIMEOUT\",60000);\n\t\t} else if (cxInfo.url.match(/:h2:/)) {\n\t\t\tvar x\u003d Packages.org.h2.Driver;\n\t\t} else if (cxInfo.url.match(/:sqlite:/)) {\n\t\t\tvar x\u003d Packages.org.sqlite.JDBC;\n\t\t} else if (cxInfo.url.match(/:postgresql:/)) {\n\t\t\tvar x\u003d Packages.org.postgresql.Driver;\n\t\t}\n\t\t//A: cargamos la clase del driver segun al url //XXX:solo las que conocemos\n\n\t\tcx\u003d java.sql.DriverManager.getConnection(cxInfo.url, props);\n\t}\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"DB CONECTANDO\",cxInfo,ex);\n\t\tthrow(ex);\n\t}\n\treturn cx;\n}\n\nsync\u003d function (fun) { //A: envuelve fun para que solo entre UN thread simultaneo\n\t//VER: https://mozilla.github.io/rhino/javadoc/org/mozilla/javascript/Synchronizer.html\n\treturn new Packages.org.mozilla.javascript.Synchronizer(fun); \n}\n\ndbCxPoolDataSource\u003d sync(function (cxInfo,forceReconnect) { //A:sync, solo un thread por vez!\n\tvar ds;\n\ttry {\n\t\tds\u003d LibRt.state.get(\"DbCxPoolDataSource\"); //XXX:MAURICIO:encapsular para que no se vea LibRt y poder cambiar la implementacion cuando queramos\n\t\tif (!ds || forceReconnect) { \n\t\t\tvar config \u003d new Packages.com.zaxxer.hikari.HikariConfig();\n\t\t\tconfig.addDataSourceProperty(\"cachePrepStmts\", \"true\"); //XXX:hace configurable desde cxInfo, cantidad de cx, etc.\n\t\t\tconfig.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\n\t\t\tconfig.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\n\n\t\t\tconfig.setUsername(cxInfo.user);\n\t\t\tconfig.setPassword(cxInfo.pass);\n\n\t\t\tif (cxInfo.url.match(/:oracle:/)) { //XXX:generalizar con el de dbCx\n\t\t\t\tvar x\u003d Packages.oracle.jdbc.driver.OracleDriver;\n\t\t\t\t//props.put(\"oracle.jdbc.ReadTimeout\",60000);\n\t\t\t\t//props.put(\"oracle.jdbc.READ_TIMEOUT\",60000);\n\t\t\t\t//props.put(\"oracle.net.CONNECT_TIMEOUT\",60000);\n\t\t\t} else if (cxInfo.url.match(/:h2:/)) {\n\t\t\t\tvar x\u003d Packages.org.h2.Driver;\n\t\t\t} else if (cxInfo.url.match(/:sqlite:/)) {\n\t\t\t\tvar x\u003d Packages.org.sqlite.JDBC;\n\t\t\t} else if (cxInfo.url.match(/:postgresql:/)) {\n\t\t\t\tvar x\u003d Packages.org.postgresql.Driver;\n\t\t\t}\n\t\t\t//A: cargamos la clase del driver segun al url //XXX:solo las que conocemos\n\t\t\tconfig.setJdbcUrl(cxInfo.url);\n\t\t\tds\u003d new Packages.com.zaxxer.hikari.HikariDataSource(config);\n\t\t\tLibRt.state.put(\"DbCxPoolDataSource\",ds);\n\t\t}\n\t}\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"DB DATASOURCE\",cxInfo,ex);\n\t\tthrow(ex);\n\t}\n\tlogm(\"DBG\",7,\"DB DATASOURCE\",{cxInfo: cxInfo, ds: ds!\u003dnull});\n\treturn ds;\n});\n\ndbCxPool\u003d function (cxInfo,forceReconnect) { //D: crea o recupera una conexion a la base de datos\n\t//VER: https://github.com/brettwooldridge/HikariCP\n\tvar cx\u003d null; //A: DFLT, no conseguimos\n\ttry {\n\t\tcx\u003d dbCxPoolDataSource(cxInfo,forceReconnect).getConnection();\n\t}\n\tcatch (ex) {\n\t\tlogmex(\"ERR\",1,\"DB CONECTANDO\",cxInfo,ex);\n\t\tthrow(ex);\n\t}\n\tlogm(\"DBG\",7,\"DB dbCxPool\",{cxInfo: cxInfo, cx: cx!\u003dnull});\n\treturn cx;\n}\n\ndbCx\u003d dbCxPool;\n\nfunction dbParse(sql) { //D: parsea WHERE ?miparam1:String\u003d\u0027pepe\u0027 AND ?miparam2\u003e5 para dbExec\n\tvar re\u003d/\\$([a-zA-Z0-9_]*)(?::([a-zA-Z]*))?/g\n\tvar names\u003d[]; var types\u003d{};\n\t//logm(\"DBG\",1,\"XXX\",typeof(sql));\n\tvar sqlSinComments\u003d delete_marked_str(sql,\"/*\",\"*/\"); //A: borramos los comentarios\n\tvar sqlclean\u003d sqlSinComments.replace(/;\\s*$/,\"\").replace(/\\r?\\n/g,\" \"); //XXX:manejar para distintos drivers\n\t\n\tvar sqlstd\u003d sqlclean.replace(re,function (exprParametro,nx,t) { \n\t\tvar reemplazo\u003d \"?\"; //DFLT\n\t\tvar n\u003d nx.toLowerCase(); \n\t\tvar tipo\u003d types[n] || { nombre: t, loPuedeManejarElDriver: true};  //DFLT //U: el tipo del parametro\n\t\t//XXX:HERNAN podriamos agregar un caso para los dates\n\t\tif (t\u003d\u003d\"SqlListaDeNumeros\") { //A: caso especial, hay que GENERAR sql\n\t\t\treemplazo\u003d exprParametro;\n\t\t\ttipo.loPuedeManejarElDriver\u003d false;\n\t\t}\n\t\telse if (t\u003d\u003d\"SqlListaDeStrings\") {//A: caso especial, hay que GENERAR sql\n\t\t\treemplazo\u003d exprParametro;\n\t\t\ttipo.loPuedeManejarElDriver\u003d false;\n\t\t} \n\t\telse if (t\u003d\u003d\"blob\") {\n\t\t\ttipo.nombre \u003d \"blob\";\n\t\t\ttipo.loPuedeManejarElDriver \u003d true;\n\t\t} else if (t \u003d\u003d \"likeString\") { //A: like \"\u0027%MIVALOR%\u0027\"\n\t\t\treemplazo\u003d exprParametro;\n\t\t\ttipo.loPuedeManejarElDriver\u003d false;\t\n\t\t}\n\t\telse { //A: caso estandard, la funcion de parametros del driver nos sirve\n\t\t}\n\t\tnames.push(n); \n\t\ttypes[n]\u003d tipo; \n\t\treturn reemplazo;\n\t});\t\n\treturn { sql: sql, sqlstd: sqlstd, names: names, types: types};\n}\n\ndbExecSqlParaDriver\u003d function(cx,dbs,paramsKvNorm) { //U: devuelve el sql que el driver entiende despues de aplicar nuestras mejoras, ej. generar lista de numeros para un where xxx in ...\n\t//U: recibe CX para poder averiguar el tipo de conexion (Oracle, Postgress, etc.) y generar el sql correspondiente\n\tvar sqlParaDriver\u003d dbs.sqlstd; //DFLT\n\tfor (var i\u003d0; i\u003cdbs.names.length; i++) { \n\t\tvar esteNombre\u003d dbs.names[i];\n\t\tvar esteTipo\u003d dbs.types[esteNombre];\n\t\tlogm(\"DBG\",9,\"dbExecSqlParaDriver\",{dbs: dbs, idx: i, esteNombre: esteNombre, esteTipo: esteTipo});\n\t\tif (esteTipo.nombre\u003d\u003d\"SqlListaDeNumeros\") { //A: requiere modificar el sql\n\t\t\tvar valor\u003d paramsKvNorm[esteNombre]; //XXX: considerar que sea nulo, poner un cartelito de log lindo para no debugguear mil horas si nos pasa\n\t\t\tvar sqlDeReemplazo\u003d valor.join(\",\");\n\t\t\tsqlParaDriver\u003d sqlParaDriver.replace(new RegExp(\"\\\\$\"+esteNombre+\":\"+esteTipo.nombre,\"gi\"),sqlDeReemplazo);\n\t\t} else if (esteTipo.nombre\u003d\u003d\"likeString\") {\n\t\t\tvar valor\u003d paramsKvNorm[esteNombre];\n\t\t\tvar sqlDeReemplazo\u003d (\"\u0027%VALOR%\u0027\").replace(\u0027VALOR\u0027,valor);\n\t\t\tsqlParaDriver \u003d sqlParaDriver.replace(new RegExp(\"\\\\$\"+esteNombre+\":\"+esteTipo.nombre,\"gi\"),sqlDeReemplazo);\n\t\t}\n\t}\n\tlogm(\"DBG\",8,\"dbExecSqlParaDriver FIN\",{dbs: dbs, idx: i, esteNombre: esteNombre, esteTipo: esteTipo, sqlParaDriver: sqlParaDriver});\n\treturn sqlParaDriver;\n}\n\nfunction dbExecImpl(cx,sql,paramsKv) { //D: NO USAR, comun a las publicas\n\tvar dbs\u003d dbParse(sql);\n\tlogm(\"DBG\",7,\"DB EXEC 0\",{dbs: dbs, params: paramsKv});\n\ttry {\n\n\t\tvar paramsKvNorm\u003d fold(paramsKv,function (v,k,acc) { acc[k.toLowerCase()]\u003d v; return acc; },{}); //A: todos los parametros tienen nombre en minuscula\n\t\tvar sqlParaDriver\u003d dbExecSqlParaDriver(cx,dbs,paramsKvNorm);\n\t\t//A: el sql que tengo se lo puedo enviar al driver\n\n\t\tvar DANGER_SQL_SOLO_PARA_DEBUG\u003d sqlParaDriver;\n\t\t//A: voy a armar uno con parametros instanciados para LOGUEAR (NUNCA PARA EJECUTAR!)\n\n\t\tvar stmt\u003d cx.prepareStatement(sqlParaDriver);\n\t\tvar paramIdx\u003d1; //A: los que efectivamente pasamos con \"set*\", no contamos las expresiones que generaron sql. JDBC empieza de 1\n\t\tfor (var i\u003d0; i\u003cdbs.names.length; i++) {try{ \n\t\t\tvar esteNombre\u003d dbs.names[i];\n\t\t\tvar esteTipo\u003d dbs.types[esteNombre];\n\t\t\tif (esteTipo.nombre \u003d\u003d \"blob\") {\n\t\t\t\tlogm(\"DBG\", 9, \"DB TIPO BLOB\", { nombre : esteNombre, tipo: esteTipo});\n\t\t\t\tvar str \u003d paramsKvNorm[esteNombre];\n\t\t\t\tvar src \u003d enc_base64_r(str);\n\t\t\t\tstmt.setBytes(paramIdx, src); paramIdx++;\n\t\t\t} else if (esteTipo.loPuedeManejarElDriver) {\n\t\t\t\tvar v\u003d paramsKvNorm[esteNombre]; //DFLT\n\t\t\t\tif (v) { //A: no es null\n\t\t\t\t\tvar x\u003d parseFloat(v); //A: si podemos lo concertimos a numero, despues setObject se ocupa\n\t\t\t\t\tif (!isNaN(x) \u0026\u0026 (x+\"\")\u003d\u003dv) { v\u003d x; } //A: lo pudimos convertir y NO cambio (sino se rompe ej. 002 como prefijo, que se convierte incorrectamente en 2)\n\t\t\t\t}\n\t\t\t\tif (v!\u003dnull \u0026\u0026 esteTipo.nombre \u0026\u0026 esteTipo.nombre!\u003dtypeof(v)) { //A: pidieron un tipo y no es el de v\n\t\t\t\t\tlogm(\"WRN\", 5, \"DB TIPO INCORRECTO\", { nombre : esteNombre, tipoDeseado: esteTipo, tipoRecibido: typeof(v), valor: v});\n\t\t\t\t}\n\t\t\t\tstmt.setObject(paramIdx,v); paramIdx++; //XXX:asegurarse que llega el tipo correcto a JDBC\n\t\t\t\tDANGER_SQL_SOLO_PARA_DEBUG\u003d DANGER_SQL_SOLO_PARA_DEBUG.replace(\u0027?\u0027,\"\u0027\"+v+\"\u0027\");\n\t\t\t}\n\t\t}catch(ex1){logmex(\"ERR\",1,\"DB EXEC 1 ARG\",{nombre: esteNombre, tipo: esteTipo, valor: v, idx: i+1, sql: sqlParaDriver, sqlDbg: DANGER_SQL_SOLO_PARA_DEBUG },ex1);throw(ex1)}}\n\t\tstmt.execute();\n\t\tlogm(\"DBG\",7,\"DB EXEC 1\",{executed: \"OK\", sqlDbg: DANGER_SQL_SOLO_PARA_DEBUG, sqlParaDriver: sqlParaDriver, dbs: dbs, params:paramsKv});\n\t}\n\tcatch(ex2){logmex(\"ERR\",2,\"DB EXEC 1\",{executed: \"FAIL\", sqlParaDriver: sqlParaDriver, dbs: dbs, params: paramsKv},ex2); throw(ex2); }\n\treturn stmt;\n}\t\n\nfunction dbExec(cx,sql,paramsKv) { //D: ejecuta actuliazacion, devuelve nro filas actualizadas o -1\n\tvar r\u003d -1;\n\tvar stmt\u003d dbExecImpl(cx,sql,paramsKv);\n\tif (stmt) {\n\t\tr\u003d stmt.getUpdateCount();\n\t\tstmt.close();\t\n\t}\n\treturn r;\n}\n\ndbQuery\u003d function (cx,sql,paramsKv) { //D: ejecuta una consulta, devuelve el resulset o null\n\tvar r;\n\tvar stmt\u003d dbExecImpl(cx,sql,paramsKv);\n\tif (stmt) {\n\t\tr\u003d stmt.getResultSet();\n\t}\n\treturn r;\n}\n\ndbNextRowArray\u003d function (rs,cols) {\n\tvar d;\n\tcols\u003d cols || LibRt.dbRsColumnNames(rs);\n\tif (rs.next()) {\n\t\td\u003d [];\n\t\tfor (var i\u003d0; i\u003ccols.length; i++) { d[i]\u003d toJs(rs.getObject(i+1)); }\n\t\tlogm(\"DBG\",9,\"DB RS ROW dbNextRowArray\",{d:d, cols: cols});\n\t}\n\telse {\n\t\tlogm(\"DBG\",9,\"DB RS ROW EMPTY dbNextRowArray\",{d:d, cols: cols});\n\t}\n\treturn d;\n}\n\n\ndbNextRowKv\u003d function (rs,cols) {\n\tvar d;\n\tcols\u003d cols || LibRt.dbRsColumnNames(rs);\n\tif (rs.next()) {\n\t\td\u003d {};\n\t\tfor (var i\u003d0; i\u003ccols.length; i++) { d[cols[i]]\u003d toJs(rs.getObject(i+1)); }\n\t\tlogm(\"DBG\",9,\"DB RS ROW dbNextRowKv\",{d:d, cols: cols});\n\t}\n\telse {\n\t\tlogm(\"DBG\",9,\"DB RS ROW EMPTY dbNextRowKv\",{d:d, cols: cols});\n\t}\n\treturn d;\n}\n\nfunction dbQueryOne(cx,sql,paramsKv,dflt) {\n\tvar r\u003d dflt;\n\tvar rs\u003d dbQuery(cx,sql,paramsKv);\n\tif (rs.next()) { r\u003d toJs(rs.getObject(1)); }\n\trs.close();\n\treturn r;\n}\n\nfunction dbQueryFirstKv(cx,sql,paramsKv,dflt) {\n\tvar rs\u003d dbQuery(cx,sql,paramsKv);\n\tvar r\u003d (rs \u0026\u0026 dbNextRowKv(rs)) || dflt;\n\trs.close();\n\treturn r;\n}\n\ndbRowsForSql\u003d function (sql,params) { //U: devuelve un array de arrays, uno para cada fila\n\tvar rs\u003d dbQuery(cx(),sql,params); var acc\u003d [];\n\twhile (d\u003d dbNextRowArray(rs)) { acc.push(d); }\n\treturn acc;\n}\n\ndbRowsForQuery\u003d function (query,params,cfgReprDb) { //U: devuelve un array de arrays, uno para cada fila\n\tvar sql\u003d reprDbSqlFor(query,cfgReprDb);\n\treturn dbRowsForSql(sql,params);\n}\n\ndbKvOfKvForQuery\u003d function (q,keyCol,params) {\n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n  var acc \u003d {};\n  while (d \u003d dbNextRowKv(rs)) { acc[d[keyCol]] \u003d d; } //XXX:GEN:dict-\u003eID-\u003ekv fila\n  return acc;\n}\n\ndbKvOfValForQuery\u003d function (q,keyCol,valCol,params) {\n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n  var acc \u003d {};\n  while (d \u003d dbNextRowKv(rs)) { acc[d[keyCol]] \u003d d[valCol]; } //XXX:GEN:dict-\u003eID-\u003evalor\n  return acc;\n}\n\ndbKvOfArrForQuery\u003d function (q,keyCol,params) { \n\t//XXX:GENERALIZAR:en todas se trata de averiguar las cols al principio, leer arrays, elegir algunos elementos Y seria suficiente que este coordinado entre cliente y servidor (generado) para usar cualquiera\n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n  var acc \u003d {};\n\tvar d;\n  while (d \u003d dbNextRowArray(rs)) { acc[d[keyCol]] \u003d d.slice(0,keyCol).concat(d.slice(keyCol+1)); } //XXX:GEN:dict-\u003eID-\u003eArray\n  return acc;\n}\n\ndbKvOfGroupForQuery\u003d function (q,keyCol,params) { \n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n\tvar r\u003d {};\n\tvar d;\n\twhile (d \u003d dbNextRowKv(rs)) {\n\t\tvar key\u003d d[keyCol];\n\t\tif(!r[key]) { r[key] \u003d []; }\n\t\tr[key].push(d);\n\t}\n\n\treturn r;\n};\n\ndbKvOfGroupArrForQuery\u003d function (q,keyCol,params) { \n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n\tvar r\u003d {};\n\tvar d;\n\twhile (d \u003d dbNextRowArray(rs)) {\n\t\tvar key\u003d d[keyCol];\n\t\tif(!r[key]) { r[key] \u003d []; }\n\t\tr[key].push(d.slice(0,keyCol).concat(d.slice(keyCol+1)));\n\t}\n\n\treturn r;\n};\n\ndbKvOfGroupPushForQuery\u003d function (q,keyCol,params) { \n  var sql \u003d reprDbSqlFor(q, CfgReprDbMap);\n  var rs \u003d dbQuery(cx(), sql,params);\n\tvar r\u003d {};\n\tvar d;\n\twhile (d \u003d dbNextRowArray(rs)) {\n\t\tvar key\u003d d[keyCol];\n\t\tif(!r[key]) { r[key] \u003d []; }\n\t\tfold(d,function (e,i) { i!\u003dkeyCol \u0026\u0026 r[key].push(e) });\n\t}\n\treturn r;\n};\n\n\n\n//SEE: http://www.tutorialspoint.com/jdbc/jdbc-transactions.htm\nfunction dbTxAutoCommit(cx,wantsActive) {\n\tcx.setAutoCommit(wantsActive);\n}\n\nfunction dbTxRollback(cx,savepoint) {\n\tcx.rollback();\n}\n\nfunction dbTxCommit(cx) {\n\tcx.commit();\n}\n\ndbSampleTables\u003d function (cx,pfx,tableNames) { //U: conseguir una muestra de tablas con su nombre\n\tcx\u003d cx || dbCx(cxcfg);\n\tfor (var i\u003d0; i\u003ctableNames.length; i++) { try { var tableName\u003d tableNames[i];\n\t\tvar rs\u003d dbQuery(cx,\"SELECT * from \"+tableName+\" WHERE ROWNUM\u003c10\");\n\t\tcnt\u003d LibRt.serRsCsvToFile(rs,null,pfx+tableName+\".dat\",-1,\"\\t\");\n\n\t\tcnt\u003d dbQueryOne(cx,\"SELECT count(*) cnt from \"+tableName);\n\t\tset_file(pfx+tableName+\".cnt\",cnt);\t\n\t} catch (ex) { set_file(pfx+tableName+\".err\",ex.message);\t\n\t\tlogmex(\"ERR\",1,\"DB SAMPLE TABLES\",{ tableName: tableName, idx: i},ex);\n\t} }\n}\n\n//*****************************************************************************\n//S: http / servlet\nwebRequestPath\u003d function (webRequest) {\n\treturn toJs(webRequest.getRequestURI())\n}\n\nwebRequestParam\u003d function (webRequest,k) {\n\tvar p\u003d toJs(webRequest.getParameter(k));\n\treturn p;\n}\n\nwebRequestParams\u003d function (webRequest) {\n\tvar cmdSrc\u003d webRequest.getParameterMap();\n\tvar cmd\u003d kvfirstMap(cmdSrc);\n\tlogm(\"NFO\",1,\"WEB REQUEST PARAMS\",{ cmdSrc: cmdSrc, cmd: cmd});\n\treturn cmd;\n}\n\nwebRequestData\u003d function (webRequest) {\n\tvar s\u003d toJs(LibRt.get_stream(new java.io.BufferedReader( new java.io.InputStreamReader( webRequest.getInputStream()))));\n\tlogm(\"DBG\",9,\"WEB REQUEST DATA\",s);\n\treturn s;\n}\n\nwebRequestHeaders\u003d function (webRequest) {\n\tvar n\u003d webRequest.getHeaderNames();\n\tvar hdr\u003d fold(toJs(n),function (n,i,acc) { acc[n]\u003d toJs(webRequest.getHeader(n)); return acc; },{});\n\treturn hdr;\n}\n\nwebRequestAddr\u003d function (webRequest) {\n\treturn String(webRequest.getRemoteAddr());\n}\n\nwebResponseWrite\u003d function (webResponse,str) {\n\twebResponse.getWriter().write(str);\n}\n\n//*****************************************************************************\n//S: scripts\nfunction contador_file(path,value,wantsSet) { //D: contador persistene en un archivo\n\tvar cnt\u003d parseInt(get_file(path)||0);\n\tlogm(\"DBG\",1,\"COUNTER\",{cnt: cnt, path: path,wantsSet: wantsSet,valueOrDelta: value});\n\tif (value!\u003d0 || wantsSet) {\n\t\tset_file(path,wantsSet ? (value||0) : (cnt+value));\n\t}\n\treturn cnt;\n}\n\n\n" 
LOG:2016-02-24_13:22:48:DBG:1:RT runtimePath URL:"file:/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/WEB-INF/classes/LibRt.class" 
LOG:2016-02-24_13:22:48:DBG:1:RT runtimePath URL OK:"file:/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/WEB-INF/classes/LibRt.class" 
LOG:2016-02-24_13:22:48:DBG:1:RT runtimePath URL:"file:/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/WEB-INF/classes/LibRt.class" 
LOG:2016-02-24_13:22:48:DBG:1:RT runtimePath URL OK:"file:/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/WEB-INF/classes/LibRt.class" 
LOG:2016-02-24_13:22:48:DBG:7:RT JS LOAD TRYING PATH:{"requiredFile":"lib.js","path":"lib.js","LibRtMyEnv":"LibRtJsRhino@69513ba9"}: 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD TRY:"lib.js" 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD TRY:"lib.js" 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET:"java.io.BufferedInputStream@4ab05984" 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:8192 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:8192 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:8192 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:7601 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:-1 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET RESULT:"function ensure_var(k,v,scope) { //D: ensure k exists in scope initializing with \"v\" if it didn\u0027t\n\tscope\u003d scope || GLOBAL;\n\tif (!(k in scope)) { scope[k]\u003d v; } return scope[k];\n}\nensureInit\u003d ensure_var; //D: deprecamos el nombre VIEJO, dejamos este alias hasta que lo eliminemos\n\n//*****************************************************************************\n//S: comunes\nahora\u003d function () {\n\treturn new Date();\n}\n\n//*****************************************************************************\n//S: log\nlogmAndThrow\u003d function (t,lvl,msg,o) {\n\tlogm(t,lvl,msg,o);\n\tthrow(ser({message: msg, data: o}));\n}\n\nlogmex\u003d function(t,lvl,msg,o,ex) {\n\tvar es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n\tif (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n\telse {\n\t\tif (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n\t\tif (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n\t}\n\tlogm(t,lvl,msg+\" EXCEPTION \"+es,o);\n}\n\nexceptionToString\u003d function (ex) {\n    var es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n    if (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n    else {\n        if (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n        if (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n    }\n    return es;\n}\n\nfArgsCopy\u003d function(a,idxMin,dst) { //U: copiar \"arguments\" a un array, USAR esta separada en una linea asi la podemos reemplazar por una macro porque v8 NO optimiza las funciones que hacen cosas raras con arguments :P\n\tvar r\u003d Array.prototype.slice.call(a,idxMin||0);\n\treturn dst ? dst.concat(r) : r;\n}\n\n//******************************************************************************\n//S: algoritmos/kv\nset_kPathV\u003d function (kv,kPath,v,idx_) { //U: [a,b,c] -\u003e { a: { b: { c: v } } }, crea lo que sea necesario\n\tkv\u003d kv || {}; idx_\u003d idx_||0;\n\tvar k0\u003d kPath[idx_]; //A: el proximo elemento del path\t\n\tkv[k0]\u003d kPath.length\u003e(idx_+1) ? set_kPathV(kv[k0],kPath,v,idx_+1) : v;\n\treturn kv;\n}\n\nensure_kPath\u003d function (kv,kPath,idx_) { //U: [a,b,c] -\u003e { a: { b: { c: {} } } }, crea lo que sea necesario pero no pisa lo que existe\n\tkv\u003d kv || {}; idx_\u003d idx_||0;\n\tvar k0\u003d kPath[idx_]; //A: el proximo elemento del path\n\tkv[k0]\u003d kv[k0]||{};\n\treturn kPath.length\u003e(idx_+1) ? ensure_kPath(kv[k0],kPath,idx_+1) : kv[k0] ;\n}\n\n//XXX:YAMI mover a lib.js desde aca\nisEmpty_kv\u003d function (obj) { //U: verdadero si un KV es nulo o esta vacio\n    if(obj!\u003dnull){ return Object.keys(obj).length \u003d\u003d\u003d 0; }\n\t\telse{ return true;}\n}\n\n\nget_kv\u003d function (kv,k,dflt) { return (kv!\u003dnull \u0026\u0026 typeof(kv)\u003d\u003d\"object\" \u0026\u0026 (k in kv)) ? kv[k] : dflt; } //U: como o[k] PERO no devuelve dflt si o es null, o no tiene k, o no es un objeto o...\n\n//******************************************************************************\n//S: algoritmos/componer funciones\nfVarArgs\u003d function (idx,f) { return function () { var args\u003d fArgsCopy(arguments); args[idx]\u003d args.splice(idx); return f.apply(null,args); } }; //U: devuelve una funcion que llama a f con los idx primeros argumentos y el resto en un array\n\nfRunDelay\u003d fVarArgs(2,function (dt,f,args) { return setTimeout(function() { f.apply(null,args); },dt); }); //U: una forma mas copada de decir que una funcion se pude ejecutar en unos milisegundos\n\nfor (var i\u003d0;i\u003c10;i++) { GLOBAL[\"fArg_\"+i]\u003d{\"fArg_\":i} };\nfArg_here\u003d {\"fArg_\": \"here\"}\nfArg_array\u003d {\"fArg_\": \"argsArray\"}\n//U: hay variables para poder escribir fArg_1 o fArg_array en funciones que manipulan argumentos\n\nfBind\u003d fVarArgs(1,function (f,idxAndVals) {  //U: devuelve una funcion que puede tener fijos algunos argumentos y cambiar de orden otros, ej. si definis miFunB\u003d fBind(miFunX,\"constante\",fArg_2,unaVarLocal,fArg_array,fArg_1,fArg_here) y llamas miFunB(\"a\",\"b\",\"c\",\"d\") es lo mismo que miFunX(\"constante\",\"c\",unaVarLocal,[\"a\",\"b\",\"c\",\"d\"],\"b\",\"a\",\"b\",\"c\",\"d\"); Las variables que pasas a fBind quedan capturadas en la funcion definida.\n\t\treturn function () { \n\t\t\tvar args\u003d []; \n\t\t\tfor (var i\u003d0; i\u003cidxAndVals.length;i++) { var x\u003d idxAndVals[i];\n\t\t\t\tvar idx\u003d get_kv(x,\"fArg_\");\n\t\t\t\tif (idx\u003d\u003d\"here\") { args\u003d fArgsCopy(arguments,0,args); }\n\t\t\t\telse { args.push(idx\u003d\u003d\"argsArray\" ? fArgsCopy(arguments) : idx!\u003dnull ? arguments[idx] : x); }\n\t\t\t}; \n\t\t\treturn f.apply(null,args);\n\t\t};\n});\n\n//*****************************************************************************\n//S: serializacion\nser_json\u003d function (o,wantsPretty) {\n\tvar s;\n\tif (o!\u003dnull) {\n\t\ttry { s\u003d JSON.stringify(o,null,wantsPretty ? 2 : null); }\n\t\tcatch (ex) { s\u003dnew String(o); }\n\t}\n\telse {\n\t\ts\u003d\"null\";\n\t}\n\treturn s;\n}\n\nser_json_r\u003d function (s) {\n\ttry { return JSON.parse(s); }\n\tcatch (ex) { logmex(\"ERR\",5,\"SER PARSE JSON\",s,ex); throw(ex); }\n}\n\nser\u003d ser_json; //DFLT\n\nser_planoOproto\u003d function (ox,serFun,wantsPretty) { //U: para NO encodear strings, usa el primer caracter para distinguir\n\tvar o\u003d toJs(ox)\n\treturn ((typeof(o)\u003d\u003d\"string\") ? (\"\\t\"+o) : (\" \"+serFun(o,wantsPretty)));\n}\n\nser_planoOproto_r\u003d function (s,serFun_r) {\n\treturn (s \u0026\u0026 s.length\u003e0) ? \n\t\ts.charAt(0)\u003d\u003d\"\\t\" ? s.substr(1) : serFun_r(s.substr(1)) :\n\t\tnull;\n}\n\nser_planoOjson\u003d function (o, wantsPretty) { return ser_planoOproto(o,ser_json,wantsPretty); }\nser_planoOjson_r\u003d function (s) { return ser_planoOproto_r(s,ser_json_r); }\n\nescape_html\u003d function (str) { //U: encodea todos los carateres peligrosos en html para que no se rompa lo que se ve\n  return str!\u003dnull ? str.replace(/[^A-Za-z0-9-_]/g,function (char) { return \"\u0026#\"+char.charCodeAt(0)+\";\" }) : \"\";\n}\n\n\n//*****************************************************************************\n//S: algoritmos / funciones utiles\ntruncate\u003d function (num,decs) { var x\u003d Math.pow(10,decs); return Math.floor(num*x)/x; }\npromedio\u003d function (v0,v1) { return v0+(v1-v0)/2; }\nclonar\u003d function (o,ext) { var r\u003d {}; for (var k in o) { r[k]\u003d o[k] }; for (var k in ext) { r[k]\u003d ext[k] }; return r; }\n\ncbMostrarResultado \u003d function() { //U: callback generico que muestra el resultado y lo guarda en la variable global x\n\tvar r\u003d fArgsCopy(arguments);\n  if (console \u0026\u0026 console.log) { console.log(ser_json(r,true)); }\n\telse if (print) { print(ser_json(r,true));}\n\telse { logm(\"DBG\",1,\"RESULTADO\",r); }\n  x \u003d r;\n}\n\n//*****************************************************************************\n//S: algoritmos / hashes\nhash_string\u003d function (s) { //U: devuelve un hash \"bastante\" UNICO para un string\n\tvar bitArray \u003d sjcl.hash.sha256.hash(s);  \n\tvar digest_sha256 \u003d sjcl.codec.hex.fromBits(bitArray); \n\treturn digest_sha256;\n}\n\nhash\u003d function (o) { //U: devuelve un hash \"bastante\" UNICO para cualquier objeto\n\treturn hash_string(ser_json(o));\n}\n\n//*****************************************************************************\n//S: algoritmos / strings\nsplitForCapitalLetters \u003d function (string) {\n  if (string.length) { string \u003d string.split(/(?\u003d[A-Z])/); }\n  return string;\n}\n\nString.prototype.splitForCapitalLetters\u003d function () { return splitForCapitalLetters[this]; }\n\nlength_str_bytes\u003d function (str) {//U: returns the byte length of an utf8 string\n  var s \u003d str.length;\n  for (var i\u003dstr.length-1; i\u003e\u003d0; i--) {\n    var code \u003d str.charCodeAt(i);\n    if (code \u003e 0x7f \u0026\u0026 code \u003c\u003d 0x7ff) s++;\n    else if (code \u003e 0x7ff \u0026\u0026 code \u003c\u003d 0xffff) s+\u003d2;\n    if (code \u003e\u003d 0xDC00 \u0026\u0026 code \u003c\u003d 0xDFFF) i--; //trail surrogate\n  }\n  return s;\n}\n \n//*****************************************************************************\n//S: algoritmos / numeros y azar\nrandom_int\u003d function (max) { return Math.floor(Math.random()*(max||10)); } //U: un entero al azar entre 0 y max\n\n//*****************************************************************************\n//S: algoritmos / ordenar listas y claves\nordenadaPorPropiedadNumerica\u003d function (lista,propiedad) {\n\treturn lista.sort(function (a,b) { return a[propiedad]-b[propiedad]; })\n}\n\nclavesOrdenadasPorPropiedadNumerica\u003d function (kv,propiedad) {\n\treturn Object.keys(kv).sort(function (a,b) { return kv[a][propiedad]-kv[b][propiedad]; })\n}\n\n\n//*****************************************************************************\n//S: algoritmos / comparar\ncmp\u003d function (a,b) { return (a||\" \")\u003d\u003d(b||\" \") ? 0 : (a||\" \") \u003e (b||\" \") ? 1 : -1 }; //U: se puede pasar como parametro a sort para ordenar numeros o strings\n\n\ndiff\u003d function(v1, v2, quiereCompararMetodos, clavesParaIgnorar,pfx, err) { //U: compara dos valores cuales quiera y devuelve null si son iguales o un array de diferencias\n    pfx\u003d pfx || \"\";\n    err\u003d err || [];\n    var t1\u003d typeof(v1);\n    var t2\u003d typeof(v2);\n    if (t1!\u003dt2) {\n        if ((v1!\u003dnull \u0026\u0026 t1!\u003d\"undefined\" \u0026\u0026 v2!\u003dnull \u0026\u0026 t2!\u003d\"undefined\") \u0026\u0026 ((t1!\u003d\"function\" \u0026\u0026 t2!\u003d\"function\") || quiereCompararMetodos)) { //A: ninguno es metodo O hay al menos un valor O quiere comprar metodos\n            err.push([pfx,\"los tipos difieren\",t1,t2,v1,v2])\n        }\n    }\n    else if (typeof(v1)\u003d\u003d\"object\" \u0026\u0026 v1 \u0026\u0026 v2) {\n        for (var k in v1) {\n\t\t\t\t\t\tif (k \u0026\u0026 (!clavesParaIgnorar || clavesParaIgnorar.indexOf(k)\u003d\u003d-1)) {\n\t            diff(v1[k],v2[k],quiereCompararMetodos,clavesParaIgnorar,pfx+\"/\"+k,err)\n\t\t\t\t\t\t}\n        }\n        for (var k in v2) {\n\t\t\t\t\tif (k \u0026\u0026 (!clavesParaIgnorar || clavesParaIgnorar.indexOf(k)\u003d\u003d-1)) {\n            if(!v1[k] \u0026\u0026 v2[k]){ err.push([pfx, \"la clave no existe en el primer objeto\",k]); }\n\t\t\t\t\t}\n        }\n    }\n    else {\n        if (v1+\"\"!\u003dv2+\"\") {\n            if ((t1!\u003d\"function\" \u0026\u0026 t2!\u003d\"function\") || (v1!\u003dnull \u0026\u0026 v2!\u003dnull) || quiereCompararMetodos) { //A: ninguno es metodo O quiere comprar metodos\n                err.push([pfx,\"los valores difieren\",v1,v2]);\n            }\n        }\n    }\n    return err.length ? err : null;\n}\n\n\n//*****************************************************************************\n//S: algoritmos / lista de strings -\u003e a lista de partes o ints\nregex_map\u003d function (l,regex) { //U: aplicar una regex a todos los elementos de una lista\n\treturn l.map(function (e) {\n\t\tvar m\u003d e.match(regex);\n\t\treturn [e].concat(m);\n\t});\n}\n\nparseint_map\u003d function (l,regex) { //U: aplicar parseint a la captura de una regex sobre todos los elementos de una lista\n\tregex\u003d regex || /(\\d+)/;\n\tvar r\u003d [];\n\tfor (var i\u003d0; i\u003cl.length; i++) {\n\t\tvar e\u003d l[i];\n\t\tvar m\u003d e.match(regex);\n\t\tif (m) {\n\t\t\tvar n\u003d parseInt(m[1]);\n\t\t\tr.push([e,n]);\n\t\t}\n\t}\t\n\treturn r;\n}\n\n//*****************************************************************************\n//S: algoritmos / aplicar una funcion a todos los elementos de un conjunto\nfold\u003d function (o,f,acc) {\n\tif (o!\u003dnull) {\n\t\tif (o.getClass) {\n\t\t\tvar c\u003d new String(o.getClass());\n\t\t\tif (c.indexOf(\"Map\")\u003e-1) {\n\t\t\t\tvar ks\u003d toJs(o.keySet());\n\t\t\t\tfor (var i in ks) { acc\u003d f(o.get(ks[i]),ks[i],acc); }\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(o)) {\n\t\t\tfor (var i\u003d0; i\u003co.length; i++) { acc\u003d f(o[i],i,acc); }\n\t\t}\n\t\telse if (typeof(o)\u003d\u003d\"object\") { \n\t\t\tfor (var k in o) { acc\u003d f(o[k],k,acc); }\n\t\t}\n\t}\n\treturn acc;\n}\n\nfoldIfKeyMatch\u003d function (col, regex, cb, acc) {\n\treturn fold(col,function (v,k,acc) { return k.match(regex) ? cb(v,k,acc) : acc });\n}\n\nkvfirst\u003d function (v,k,acc) { logm(\"DBG\",9,\"KV FIRST\",{k: k, v: v}); acc[k]\u003d v \u0026\u0026 v[0] ; return acc; };\nkvfirstMap\u003d function (o,acc) { return fold(o,kvfirst,acc ||{}); }\n\n//*****************************************************************************\n//S: construir claveXvalor a partir de listas\nzipkv\u003d function (lOfK,lOfV,acc) {\n\treturn fold(lOfK,function (v,k,acc) { acc[v]\u003d lOfV[k]; return acc; },acc ||{});\n}\n\narrayToKv\u003d function (a,pfx) {\n\tpfx\u003d pfx || \"col\";\n\tvar r\u003d {};\n\tfor (var j\u003d0; j\u003ca.length; j++) { r[pfx+(j+1)]\u003d a[j]; };\n\treturn r;\n}\n\n\n//*****************************************************************************\n//S: algoritmos / nombres de archivos\nseguro_str\u003d function (s,caracterEscapeAntes,caracterEscapeDespues,caracteresPermitidos) {\n\tcaracterEscapeAntes\u003d caracterEscapeAntes || \"_\"; //A: seguro en nombres de archivo widows y linux\n\tcaracterEscapeDespues\u003d caracterEscapeDespues || caracterEscapeAntes;\n\tcaracteresPermitidos\u003d caracteresPermitidos || \"a-zA-Z0-9\"; //A: seguro en nombres de archivo widows y linux\n\treturn s.replace(new RegExp(\"[^\"+caracteresPermitidos+\"]\",\"g\"),function (m) { return caracterEscapeAntes+m.charCodeAt(0).toString(16)+caracterEscapeDespues; })\n}\n\nseguro_str_r\u003d function (s,caracterEscapeAntes,caracterEscapeDespues) {\n\tcaracterEscapeAntes\u003d caracterEscapeAntes || \"_\";\n\tcaracterEscapeDespues\u003d caracterEscapeDespues || caracterEscapeAntes;\n\treturn s.replace(new RegExp(caracterEscapeAntes+\"([0-9a-fA-F]+)\"+caracterEscapeDespues,\"g\"),function (m,h) { return String.fromCharCode(parseInt(h,16)); });\n}\n\nseguro_fname\u003d seguro_str;\nseguro_fname_r\u003d seguro_str_r;\n\nseguro_fpath\u003d function (s) { return seguro_str(s,null,null,\"a-zA-Z0-9/\").replace(/^\\//,\"\"); }\nseguro_fpath_r\u003d seguro_str_r;\n\n//*****************************************************************************\n//S: algoritmos / strings y plantillas\nescape_regexp_str\u003d function (str) { //U: devuelve la RegExp equivalente al literal str, ej. para construir expresiones regulares mezclando literales recibidos como parametro\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$\u0026\"); //VER: http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\n}\n\ndelete_marked_str\u003d function (s,markStart,markEnd) {\n\treturn s.replace(new RegExp(escape_regexp_str(markStart)+\"[^]*?\"+escape_regexp_str(markEnd),\"g\"),\"\");\n}\n\n//*****************************************************************************\n//S: wrappers\nfuncionComoA\u003d function(funcionQueDevuelveResultado,noQuiereCopiaArgs) { //D: envuelve una funcion sincrona en una asincrona, ej. para hacerla compatible con una api asincrona\n\treturn function () { try {\n\t\t\tvar args\u003d fArgsCopy(arguments);\n\t\t\tvar cb\u003d args.pop(); //D: CONVENCION! el callback va al final\n\t\t\tvar r\u003d funcionQueDevuelveResultado.apply(this,args);\n\t\t\tnoQuiereCopiaArgs ? cb(r) : cb(r,null,args);\n\t\t} catch (ex) { cb(null,ex,args); }\n\t}\n}\n\n//*****************************************************************************\n//S: algoritmos / cache / ultimoUso\nlimpiar_cache_recienUsados\u003d function (cache) {\n\tvar claves\u003d Object.keys(cache.elementoYuso)\n\tvar elementosAntesCnt\u003d claves.length;\n\tvar cuantosHayQueBorrar\u003d elementosAntesCnt - cache.cntMax;\n\tif (cuantosHayQueBorrar\u003e0 || (cache.szMax \u0026\u0026 cache.szUsada\u003ecache.szMax)) {\n\t\tclaves\u003d clavesOrdenadasPorPropiedadNumerica(cache.elementoYuso,\"cuandoUso\");\n\t\tfor (var i\u003d0; (i\u003ccuantosHayQueBorrar || (cache.szMax \u0026\u0026 cache.szUsada\u003ecache.szMax)) \u0026\u0026 i\u003cclaves.length; i++) {\n\t\t\tvar k\u003d claves[i]\n\t\t\tvar e\u003d cache.elementoYuso[k];\n\t\t\tif (e) {\n\t\t\t\tcache.szUsada-\u003d e.sz;\n\t\t\t\tdelete(cache.elementoYuso[k]);\n\t\t\t}\n\t\t}\n\t}\n\tlogm(\"DBG\",8,\"CACHE LIMPIAR\",{ cnt: claves.length, cntMax: cache.cntMax, borrados: i\u003e0 ? claves.slice(0,i) : \"NINGUNO\" });\n}\n\nsea_cache_recienUsados\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\tvar sz\u003d typeof(v)\u003d\u003d\"string\" ? v.length : sz || 0; //A: OJO! solo podemos contar el tamaÃ±o de strings\n\tvar r\u003d { cuandoUso: ahora(), valor: v, sz: sz};\n\tborrar_cache_recienUsados(cache,k); //A: descontamos el que vamos a reemplazar si estaba\n\tcache.szUsada+\u003d sz; //A: YA cuento el tamaÃ±o, por si tengo que borrar para no pasarme de tamaÃ±o total\n\tif (!quiereLimpiarDespues) { limpiar_cache_recienUsados(cache); } //A: hice lugar si necesitaba\n\tcache.elementoYuso[k]\u003d r;\t//A: ahora agrego el elemento\n\treturn v;\n}\n\nde_cache_recienUsados\u003d function (cache,k) {\n\tvar r\u003d cache.elementoYuso[k];\n\tif (r) { \n\t\tr.cuandoUso\u003d ahora(); \n\t\treturn r.valor;\n\t}\n}\n\nborrar_cache_recienUsados\u003d function (cache,k) {\n\ttry { \n\t\t\tvar e\u003d cache.elementoYuso[k];\n\t\t\tif (e) {\n\t\t\t\tcache.szUsada-\u003d e.sz;\n\t\t\t\tdelete(cache.elementoYuso[k]);\n\t\t\t}\n\t}\n\tcatch (ex) {}; //A: si no estaba, no pasa nada\t\n}\n\nborrarTodo_cache_recienUsados\u003d function (cache) {\n\tcache.elementoYuso\u003d {};\n\tcache.szUsada\u003d 0;\n}\n\nnuevo_cache_recienUsados\u003d function (nombre,cntMax,szMax) {\n\tvar r\u003d { nombre: nombre, cntMax: cntMax, szMax: szMax, szUsada: 0, elementoYuso: {}};\n\tfor (var k in CacheApi_recienUsados) { r[k]\u003d CacheApi_recienUsados[k] }\n\treturn r;\n}\n\nCacheApi_recienUsados\u003d {\n\tnuevo: nuevo_cache_recienUsados,\n\tde: de_cache_recienUsados,\n\tde_a: funcionComoA(de_cache_recienUsados,true),\n \tsea: sea_cache_recienUsados,\n\tlimpiar: limpiar_cache_recienUsados,\n\tborrar: borrar_cache_recienUsados,\n\tborrarTodo: borrarTodo_cache_recienUsados,\n};\n\n//*****************************************************************************\n//S: algoritmos / cache / archivos \nnuevo_cache_archivos\u003d function (nombre, path) {\n\tensure_dir(path);\n\tr\u003d { nombre: nombre, path: path, dirsOk: {} }\n\tfor (var k in CacheApi_archivos) { r[k]\u003d CacheApi_archivos[k] }\n\treturn r;\n}\n\nlimpiar_cache_archivos\u003d function (cache) {\n\t//XXX:TODO\n\n}\n\nsea_cache_archivos\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\tvar ps\u003d seguro_fpath(k);\n\tvar p\u003d ps.replace(/[^\\/]*$/,\"\");\n\tif (!cache.dirsOk[p]) { ensure_dir(cache.path+\"/\"+p); cache.dirsOk[p]\u003d 1; }\n\tset_file(cache.path+\"/\"+ps,ser_planoOjson(v));\n\treturn v;\n}\n\n//XXX:GASTON: CREAR INVALIDAR FILE CON *\nborrar_cache_archivos\u003d function(cache,k) {\n\tvar fname\u003d cache.path+\"/\"+seguro_fpath(k);\n\tlogm(\"NFO\", 5, \"CACHE ARCHIVOS BORRAR\", {k: k, fname: fname});\n  delete_file(fname);\n};\n\nde_cache_archivos\u003d function (cache,k) {\n\treturn ser_planoOjson_r(get_file(cache.path+\"/\"+seguro_fpath(k)));\n}\n\nborrarTodo_cache_archivos\u003d function (cache) { //XXX: TODO\n}\n\nCacheApi_archivos\u003d {\n\tnuevo: nuevo_cache_archivos,\n\tde: de_cache_archivos,\n\tde_a: funcionComoA(de_cache_archivos),\n \tsea: sea_cache_archivos,\n\tlimpiar: limpiar_cache_archivos,\n\tborrar: borrar_cache_archivos,\n\tborrarTodo: borrarTodo_cache_archivos,\n};\n\n//*****************************************************************************\n//S: algoritmos / cache / archivos  en phonegap\nnuevo_cache_archivosMovil\u003d function (nombre, pfx) {\n\tr\u003d { nombre: nombre, pfx: pfx }\n\tfor (var k in CacheApi_archivosMovil) { r[k]\u003d CacheApi_archivosMovil[k] }\n\treturn r;\n}\n\nlimpiar_cache_archivosMovil\u003d function (cache) {\n\t//XXX:TODO\n}\n\nsea_cache_archivosMovil\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\tvar f1\u003d function () { try {\n\t\tvar path\u003d CFGLIB.pathToLib+\"cache/\"+cache.pfx+\"/\"+seguro_fname(cache.pfx+\"_\"+k);\n\t\tlogm(\"DBG\",7,\"sea_cache_archivosMovil \",{k:k,path:path});\n\t\t\n\t\tset_file_bin_a(path,ser_planoOjson(v),function () { \n\t\t\tlogm(\"DBG\",1,\"sea_cache_archivosMovil OK \",{k:k,path:path}); \n\t\t}, function(err) {\n\t\t\tlogm(\"DBG\",7,\"sea_cache_archivosMovil ERR \",{k:k,path:path,err:err});\n\t\t});\n\t} catch (ex) { \n\t\tlogm(\"ERR\",3,\"sea_cache_archivosMovil \",{k:k,message:ex.message});\n\t} };\n\tensure_dir(CFGLIB.pathToLib+\"cache/\"+cache.pfx,f1,f1);\n}\n\nborrar_cache_archivosMovil\u003d function (cache,k) {\n\tvar path\u003d CFGLIB.pathToLib+\"cache/\"+cache.pfx+\"/\"+seguro_fname(cache.pfx+\"_\"+k);\n\t\tlogm(\"DBG\",7,\"borrar_cache_archivosMovil \",{k:k,path:path});\n\t\t\n\tdelete_file(path,function () { \n\t\t\tlogm(\"DBG\",1,\"borrar_cache_archivosMovil OK \",{k:k,path:path});\n\t\t}, function(err) { \n\t\t\tlogm(\"DBG\",7,\"borrar_cache_archivosMovil ERR \",{k:k,path:path,err:err});\n\t\t});\n}\n\nborrarTodo_cache_archivosMovil\u003d function (cache,quiereSinPedirConfirmacion,cb) {\n\tvar path\u003d CFGLIB.pathToLib+\"cache/\"+cache.pfx;\n\tdeleteAll_dir(path,quiereSinPedirConfirmacion,cb);\n}\n\nde_a_cache_archivosMovil\u003d function (cache,k,cbok,cbf) {\n\tget_file_a(CFGLIB.pathToLib+\"cache/\"+cache.pfx+\"/\"+seguro_fname(cache.pfx+\"_\"+k),\"bin\",\n\t\tfunction (d) { \n\t\t\tvar v\u003d ser_planoOjson_r(d); \n\t\t\tcbok(v,(d||\"\").length);\n\t\t},\n\t\tcbf||function (err) { cbok(null,-1,err); });\n}\n\nCacheApi_archivosMovil\u003d {\n\tnuevo: nuevo_cache_archivosMovil,\n\tde_a: de_a_cache_archivosMovil,\n \tsea: sea_cache_archivosMovil,\n\tlimpiar: limpiar_cache_archivosMovil,\n\tborrar: borrar_cache_archivosMovil,\n\tborrarTodo: borrarTodo_cache_archivosMovil,\n};\n\n//*****************************************************************************\n//S: errores, coordinar con libcx!!!  \nesCxError \u003d function(data) {\n\tvar r\u003d (data\u003d\u003dnull) || (typeof(data)\u003d\u003d\"string\" \u0026\u0026 data.indexOf(\"LibCxException\")!\u003d-1) || data.LibCxException!\u003dnull;\n\tif (r) { logm(\"DBG\",5,\"esCxError?\",{esError:r, data: ser_planoOjson(data).substr(0,100),}); }\n\treturn r;\n};\n\nsetCxError \u003d function(msg,data) { //U: para generar una respuesta que de verdadero a esCxError\n\treturn {\"LibCxException\": msg, data: data};\n};\n\n\n//*****************************************************************************\n//S: wrappers\n//XXX: generalizar para que tambien sirva para cache en db\n//XXX: generalizar, agregar localStorage\nenvolver_contador\u003d function (f) { //D: envuelve la funcion en otra que cuenta las veces que la llamaste, ej. para saber cuantos tiles borraste dentro de un poligono \n    var fConContador;\n    fConContador\u003d function () {\n        fConContador.cuenta++;\n        return f.apply(this,arguments);\n    }\n    fConContador.cuenta\u003d0;\n    return fConContador;\n}\n\nnuevo_cache_envuelto\u003d function (cache,fun,fun_r) {\n\tvar sea_x\u003d cache.sea_ori\u003d cache.sea;\n\tvar de_a_x\u003d cache.de_a_ori\u003d cache.de_a;\n\tcache.sea\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\t\tsea_x(cache,k,fun(v),sz,quiereLimpiarDespues);\n\t};\n\tcache.de_a\u003d function (cache,k,cbok,cbf) {\n\t\tde_a_x(cache,k,function (data,err) { try {\n\t\t\t\tvar args\u003d fArgsCopy(arguments);\n\t\t\t\tif (data!\u003dnull) { args[0]\u003d fun_r(data); } //A: SOLO cambio data por aplicar la funcion a data, lo demas sigue el mismo protocolo\n\t\t\t\tcbok.apply(this,args);\n\t\t} catch (ex) { logmex(\"ERR\",1,\"CACHE ENVUELTO DE CB ERR\",{ cache: cache.nombre, k: k},ex) }}, cbf);\n\t};\n\treturn cache;\n}\n\nfuncionConCacheDefault_a\u003d function (cbQueActualiza,cacheDondeGuardo,keyF,cbIdx,quierePasarSizeACb) { //U: intenta llamar a la funcion, si va bien guarda los datos, si falla y tiene datos guardados los usa\n\tlogm(\"DBG\",5,\"funcionConCacheDefault_a MK \",cacheDondeGuardo);\n\tvar r\u003d (function () {try{\n\t\tlogm(\"DBG\",8,\"funcionConCacheDefault_a\",{args:args,clave:clave});\n\t\tvar args\u003d fArgsCopy(arguments);\n\t\tvar cb\u003d args[cbIdx]; //U: indice de la que hay que llamar con los datos\n\t\tvar clave\u003d keyF.apply(this,args);\n\n\t\targs[cbIdx]\u003d function (data,sz) {try{\n\t\t\tvar argsParaCb\u003d quierePasarSizeACb ? fArgsCopy(arguments) : fArgsCopy(arguments,2,[data]);\n\t\t\tif (!esCxError(data)) {try{ //A: consegui datos nuevos, actualizo el cache\n\t\t\t\tcacheDondeGuardo.sea(cacheDondeGuardo,clave,data,sz);\n\t\t\t\tlogm(\"DBG\",8,\"CACHE OK GUARDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_sz: sz, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\tcb.apply(this,argsParaCb); //A: llamo a la funcion que esperaba el resultado con los datos nuevos\t\n\t\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE INVOCANDO CB\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }}\n\t\t\telse {try{//A: no consegui los datos, me vino error\n\t\t\t\tlogm(\"DBG\",8,\"CACHE NO CONSEGUI DATOS NUEVOS, INTENTO CACHE\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\n\t\t\t\tcacheDondeGuardo.de_a(cacheDondeGuardo,clave, function (data,sz,err) {try{\n\t\t\t\t\tif (data!\u003dnull \u0026\u0026 !err) { logm(\"DBG\",8,\"CACHE ESTABA\",{cache: cacheDondeGuardo.nombre, clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)}); //XXX:MAU agregar que puede haber NULL para esa clave\n\t\t\t\t\t\targsParaCb[0]\u003d data;\n\t\t\t\t\t\tcb.apply(this,argsParaCb);\n\t\t\t\t\t}\n\t\t\t\t\telse { \n\t\t\t\t\t\tlogm(\"DBG\",8,\"CACHE FALTA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\t\t\tcb.apply(this,argsParaCb);\n\t\t\t\t\t}\n\t\t\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE INVOCANDO CB\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); } });\n\t\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE BUSCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }}\n\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE RECIBIENDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }} ; \n\t\t//A: reemplace el callback que recibe el resultado por mi funcion que si llego bien lo guarda y se lo pasa y sino, le pasa uno del cache\n\t\tcbQueActualiza.apply(this, args);\t\n\t}catch(ex){ logmex(\"ERR\",1,\"CACHE PIDIENDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }}); \n\t//A: r es una funcion que de afuera se ve igual que la original, pero si la original falla usa datos de la ultima vez que funciono\n\tr.cache\u003d cacheDondeGuardo;\n\tr.keyF\u003d keyF;\n\tr.funcionEnvuelta\u003d cbQueActualiza;\n\treturn r;\n};\n\nfuncionConCache_a\u003d function (cbSiNoEsta,cacheDondeGuardo,keyF,cbIdx,quierePasarSizeACb) {\n\tlogm(\"DBG\",5,\"funcionConCache MK \",cacheDondeGuardo);\n\tvar r\u003d (function () { try {\n\t\tvar args\u003d fArgsCopy(arguments); //A: los args de la LLAMADA ORIGINAL a la funcion\n\t\tvar clave\u003d keyF.apply(this,args);\n\t\tlogm(\"DBG\",8,\"funcionConCache_a\",{args:args,clave:clave});\n\t\tvar cb\u003d args[cbIdx]; //U: indice de la que hay que llamar con los datos\n\t \tcacheDondeGuardo.de_a(cacheDondeGuardo,clave, function (data,sz,err) { try {\n\t\t\tif (data!\u003dnull \u0026\u0026 !err) { logm(\"DBG\",8,\"CACHE ESTABA\",{cache: cacheDondeGuardo.nombre, clave: clave, sz: sz, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)}); //XXX:MAU agregar que puede haber NULL para esa clave en el cache\n\t\t\t\tif (quierePasarSizeACb)  { args.unshift(sz); }\n\t\t\t\targs.unshift(data);\n\t\t\t\tcb.apply(this,args);\n\t\t\t}\n\t\t\telse { logm(\"DBG\",8,\"CACHE FALTA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\targs[cbIdx]\u003d function (data,sz,err) { try {\n\t\t\t\t\tvar argsCb\u003d quierePasarSizeACb ? fArgsCopy(arguments) : fArgsCopy(arguments,2,[data]);\n\t\t\t\t\tif (!esCxError(data)) {\n\t\t\t\t\t\tcacheDondeGuardo.sea(cacheDondeGuardo,clave,data,sz);\n\t\t\t\t\t\tlogm(\"DBG\",8,\"CACHE GUARDO\",{cache: cacheDondeGuardo.nombre,clave: clave, sz: sz, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogm(\"DBG\",8,\"CACHE ES ERROR CX NO GUARDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\t\t}\n\t\t\t\t\tcb.apply(this,argsCb);\t\n\t\t\t\t}catch(ex){logmex(\"ERR\",1,\"CACHE INVOCANDO CON DATOS\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex);}};\n\t\t\t\tcbSiNoEsta.apply(this, args);\t\n\t\t\t}\n\t\t} catch (ex) { logmex(\"ERR\",1,\"CACHE INVOCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); } });\n\t} catch (ex) { logmex(\"ERR\",1,\"CACHE BUSCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); } });\n\tr.cache\u003d cacheDondeGuardo;\n\tr.keyF\u003d keyF;\n\tr.funcionEnvuelta\u003d cbSiNoEsta;\n\treturn r;\n};\n\n//XXX:MAURICIO:agregar que si ya hay un thread calculando el valor, los demas esperen en vez de TAMBIEN calcularlo\nfuncionConCache\u003d function (cbSiNoEsta,cacheDondeGuardo,keyF,quiereLlamarSiempre) {\n\tlogm(\"DBG\",1,\"funcionConCache MK\",cacheDondeGuardo);\n\tvar r\u003d function () {\n\t\ttry {\n\t\t\tlogm(\"DBG\",1,\"funcionConCache\",cacheDondeGuardo);\n\t\t\tvar args\u003d fArgsCopy(arguments);\n\t\t\tvar clave\u003d keyF.apply(this,args);\n\t\t\tvar data\u003d quiereLlamarSiempre ? null : cacheDondeGuardo.de(cacheDondeGuardo,clave);\n\t\t\tif (data!\u003dnull) { logm(\"DBG\",8,\"CACHE ESTABA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t}\n\t\t\telse { logm(\"DBG\",8,\"CACHE FALTA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\ttry {\n\t\t\t\t\tdata\u003d cbSiNoEsta.apply(this,args);\n\t\t\t\t\tcacheDondeGuardo.sea(cacheDondeGuardo,clave,data);\n\t\t\t\t} catch (ex) { \n\t\t\t\t\tlogmex(\"ERR\",1,\"CACHE INVOCANDO CON DATOS\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); \n\t\t\t\t\tthrow(ex); //A: vuelvo a lanzar la excepcion porque otros la precisan, ej. libcx para avisarle al cliente\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (ex) { \n\t\t\tlogmex(\"ERR\",1,\"CACHE INVOCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); throw(ex); \n\t\t\tthrow(ex); //A: vuelvo a lanzar la excepcion porque otros la precisan, ej. libcx para avisarle al cliente\n\t\t}\n\t};\n\tr.cache_borrar\u003d function () {\n\t\tvar args\u003d fArgsCopy(arguments);\n\t\tvar clave\u003d keyF.apply(this,args);\n\t\tlogm(\"DBG\",8,\"funcionConCache CACHE_BORRAR\",{args:args,clave:clave});\n\t\tcacheDondeGuardo.borrar(cacheDondeGuardo,clave);\n\t};\n\treturn r;\n}\n\n//XXX: descomponer y hacer mas configurable y componible!\nfuncionConCache_a_archivos \u003d function(nombre, funcion, cbIdx, funcionClavePara, prefijoNombreArchivo, cache, quierePasarSizeACb) { //D: envuelve una funcion con cache, si esta en movil usa archivos encriptados para cuando este offline\n    prefijoNombreArchivo \u003d prefijoNombreArchivo || \"\";\n\n    var cache \u003d cache || nuevo_cache_recienUsados(nombre, 1); //A:DFLT\n\n    var funcionConCacheArchivos \u003d funcion; //A: DFLT, ej. cxAjaxCall que trae los datos\n\n    if (GLOBAL.enAppMovil || GLOBAL.CACHE_LOCALSTORAGE) {\n        var cacheArchivos \u003d nuevo_cache_envuelto(nuevo_cache_archivosMovil(nombre + \"_archivos\", prefijoNombreArchivo), encriptar, encriptar_r);\n        funcionConCacheArchivos \u003d funcionConCache_a(funcion, cacheArchivos, funcionClavePara, cbIdx, true); //A: si tiene los datos en el cache, que nos pase el size para el cache recienUsados\n    }\n\t\telse if (GLOBAL.rtType\u003d\u003d\"java\") {\n        var cacheArchivos \u003d nuevo_cache_archivos(\"x_cache_\"+nombre, \"x_cache_\"+nombre);\n        funcionConCacheArchivos \u003d funcionConCache_a(funcion, cacheArchivos, funcionClavePara, cbIdx,true);\n\t\t}\n\n    var funcionr \u003d funcionConCache_a(funcionConCacheArchivos, cache, funcionClavePara, cbIdx, quierePasarSizeACb); //A: aca, como quiera la funcion\n    funcionr.cache \u003d cache;\n    funcionr.cacheArchivos \u003d cacheArchivos;\n\t\tfuncionr.cacheBorrar\u003d function () {\n\t   \tif (funcionr.cacheArchivos) { funcionr.cacheArchivos.borrarTodo(funcionr.cacheArchivos,true); }\n \t   \tif (funcionr.cache) { funcionr.cache.borrarTodo(funcionr.cache); }\n\t\t}\n    return funcionr;\n}\n\nfuncionConCacheDefault_a_archivos \u003d function(nombre, funcion, cbIdx, funcionClavePara, prefijoNombreArchivo, cache) { //D: envuelve una funcion con cache, si esta en movil usa archivos encriptados para cuando este offline\n    prefijoNombreArchivo \u003d prefijoNombreArchivo || \"\";\n    var cache \u003d cache || nuevo_cache_recienUsados(nombre, 1);\n\n    var funcionConCacheArchivos \u003d funcion; //A: DFLT\n\n    if (GLOBAL.enAppMovil || GLOBAL.CACHE_LOCALSTORAGE) { //XXX:MAU cambiar por tiene filesystem!\n        var cacheArchivos \u003d nuevo_cache_envuelto(nuevo_cache_archivosMovil(nombre + \"_archivos\", prefijoNombreArchivo), encriptar, encriptar_r);\n        funcionConCacheArchivos \u003d funcionConCacheDefault_a(funcion, cacheArchivos, funcionClavePara, cbIdx,true);\n    }\n\t\telse if (GLOBAL.rtType\u003d\u003d\"java\") {\n        var cacheArchivos \u003d nuevo_cache_archivos(\"x_cache_\"+nombre, \"x_cache_\"+nombre);\n        funcionConCacheArchivos \u003d funcionConCacheDefault_a(funcion, cacheArchivos, funcionClavePara, cbIdx);\n\t\t}\n\n    var funcionr \u003d funcionConCacheDefault_a(funcionConCacheArchivos, cache, funcionClavePara, cbIdx);\n    funcionr.cache \u003d cache;\n    funcionr.cacheArchivos \u003d cacheArchivos;\n\t\tfuncionr.cacheBorrar\u003d function () {\n\t   \tif (funcionr.cacheArchivos) { funcionr.cacheArchivos.borrarTodo(funcionr.cacheArchivos,true); }\n \t   \tif (funcionr.cache) { funcionr.cache.borrarTodo(funcionr.cache); }\n\t\t}\n    return funcionr;\n}\n\n//*****************************************************************************\n//S: validaciones\nvalidate_pass\u003d function(security) { //XXX:MOVER:a lib, asi tambien se puede usar en el backend\n        var msg \u003d \"\";\n        var newPassHasCorrectLength \u003d security.newPass.length \u003e 5; //XXX:CFG\n        var newPassContainsNumber \u003d /\\d/.test(security.newPass);\n        var newPassContainsLetter \u003d /[a-zA-Z]/.test(security.newPass);\n\n        if (!security.currentPass || !security.newPass || !security.newPassCheck) {\n            msg \u003d \"Falta ingresar al menos un dato\";\n            return msg;\n        }\n        if (security.newPass !\u003d security.newPassCheck) {\n            msg \u003d \"La clave nueva no coincide con la repeticion de la misma\";\n            return msg;\n        }\n        if (security.currentPass !\u003d Cfg.pass) {\n            msg \u003d \"ContraseÃ±a actual incorrecta\";\n            return msg;\n        }\n        if (!(newPassHasCorrectLength \u0026\u0026 newPassContainsNumber \u0026\u0026 newPassContainsLetter)){\n            msg \u003d \"La contraseÃ±a debe tener una longitud de 6 caracteres como mÃ­nimo y contener al menos un nÃºmero y una letra\";\n            return msg;\n        }\n        return msg;\n}\n\n\n" 
LOG:2016-02-24_13:22:48:DBG:9:RT JS EVAL START PATH=lib.js SRC:"function ensure_var(k,v,scope) { //D: ensure k exists in scope initializing with \"v\" if it didn\u0027t\n\tscope\u003d scope || GLOBAL;\n\tif (!(k in scope)) { scope[k]\u003d v; } return scope[k];\n}\nensureInit\u003d ensure_var; //D: deprecamos el nombre VIEJO, dejamos este alias hasta que lo eliminemos\n\n//*****************************************************************************\n//S: comunes\nahora\u003d function () {\n\treturn new Date();\n}\n\n//*****************************************************************************\n//S: log\nlogmAndThrow\u003d function (t,lvl,msg,o) {\n\tlogm(t,lvl,msg,o);\n\tthrow(ser({message: msg, data: o}));\n}\n\nlogmex\u003d function(t,lvl,msg,o,ex) {\n\tvar es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n\tif (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n\telse {\n\t\tif (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n\t\tif (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n\t}\n\tlogm(t,lvl,msg+\" EXCEPTION \"+es,o);\n}\n\nexceptionToString\u003d function (ex) {\n    var es\u003d (typeof(ex)\u003d\u003d\"string\" \u0026\u0026 ex) || (ex.message \u0026\u0026 (ex.message + (ex.data ? (\" \"+ser_json(ex.data)) : \"\")) || ex.getMessage()|| \"\").replace(/\\r?\\n/g,\" \");\n    if (ex.stack) { es+\u003d \" \"+ex.stack.replace(/\\r?\\n/g,\" \u003e \");}\n    else {\n        if (ex.fileName) { es+\u003d \" \"+ex.fileName;}\n        if (ex.lineNumber) { es+\u003d \":\"+ex.lineNuber;}\n    }\n    return es;\n}\n\nfArgsCopy\u003d function(a,idxMin,dst) { //U: copiar \"arguments\" a un array, USAR esta separada en una linea asi la podemos reemplazar por una macro porque v8 NO optimiza las funciones que hacen cosas raras con arguments :P\n\tvar r\u003d Array.prototype.slice.call(a,idxMin||0);\n\treturn dst ? dst.concat(r) : r;\n}\n\n//******************************************************************************\n//S: algoritmos/kv\nset_kPathV\u003d function (kv,kPath,v,idx_) { //U: [a,b,c] -\u003e { a: { b: { c: v } } }, crea lo que sea necesario\n\tkv\u003d kv || {}; idx_\u003d idx_||0;\n\tvar k0\u003d kPath[idx_]; //A: el proximo elemento del path\t\n\tkv[k0]\u003d kPath.length\u003e(idx_+1) ? set_kPathV(kv[k0],kPath,v,idx_+1) : v;\n\treturn kv;\n}\n\nensure_kPath\u003d function (kv,kPath,idx_) { //U: [a,b,c] -\u003e { a: { b: { c: {} } } }, crea lo que sea necesario pero no pisa lo que existe\n\tkv\u003d kv || {}; idx_\u003d idx_||0;\n\tvar k0\u003d kPath[idx_]; //A: el proximo elemento del path\n\tkv[k0]\u003d kv[k0]||{};\n\treturn kPath.length\u003e(idx_+1) ? ensure_kPath(kv[k0],kPath,idx_+1) : kv[k0] ;\n}\n\n//XXX:YAMI mover a lib.js desde aca\nisEmpty_kv\u003d function (obj) { //U: verdadero si un KV es nulo o esta vacio\n    if(obj!\u003dnull){ return Object.keys(obj).length \u003d\u003d\u003d 0; }\n\t\telse{ return true;}\n}\n\n\nget_kv\u003d function (kv,k,dflt) { return (kv!\u003dnull \u0026\u0026 typeof(kv)\u003d\u003d\"object\" \u0026\u0026 (k in kv)) ? kv[k] : dflt; } //U: como o[k] PERO no devuelve dflt si o es null, o no tiene k, o no es un objeto o...\n\n//******************************************************************************\n//S: algoritmos/componer funciones\nfVarArgs\u003d function (idx,f) { return function () { var args\u003d fArgsCopy(arguments); args[idx]\u003d args.splice(idx); return f.apply(null,args); } }; //U: devuelve una funcion que llama a f con los idx primeros argumentos y el resto en un array\n\nfRunDelay\u003d fVarArgs(2,function (dt,f,args) { return setTimeout(function() { f.apply(null,args); },dt); }); //U: una forma mas copada de decir que una funcion se pude ejecutar en unos milisegundos\n\nfor (var i\u003d0;i\u003c10;i++) { GLOBAL[\"fArg_\"+i]\u003d{\"fArg_\":i} };\nfArg_here\u003d {\"fArg_\": \"here\"}\nfArg_array\u003d {\"fArg_\": \"argsArray\"}\n//U: hay variables para poder escribir fArg_1 o fArg_array en funciones que manipulan argumentos\n\nfBind\u003d fVarArgs(1,function (f,idxAndVals) {  //U: devuelve una funcion que puede tener fijos algunos argumentos y cambiar de orden otros, ej. si definis miFunB\u003d fBind(miFunX,\"constante\",fArg_2,unaVarLocal,fArg_array,fArg_1,fArg_here) y llamas miFunB(\"a\",\"b\",\"c\",\"d\") es lo mismo que miFunX(\"constante\",\"c\",unaVarLocal,[\"a\",\"b\",\"c\",\"d\"],\"b\",\"a\",\"b\",\"c\",\"d\"); Las variables que pasas a fBind quedan capturadas en la funcion definida.\n\t\treturn function () { \n\t\t\tvar args\u003d []; \n\t\t\tfor (var i\u003d0; i\u003cidxAndVals.length;i++) { var x\u003d idxAndVals[i];\n\t\t\t\tvar idx\u003d get_kv(x,\"fArg_\");\n\t\t\t\tif (idx\u003d\u003d\"here\") { args\u003d fArgsCopy(arguments,0,args); }\n\t\t\t\telse { args.push(idx\u003d\u003d\"argsArray\" ? fArgsCopy(arguments) : idx!\u003dnull ? arguments[idx] : x); }\n\t\t\t}; \n\t\t\treturn f.apply(null,args);\n\t\t};\n});\n\n//*****************************************************************************\n//S: serializacion\nser_json\u003d function (o,wantsPretty) {\n\tvar s;\n\tif (o!\u003dnull) {\n\t\ttry { s\u003d JSON.stringify(o,null,wantsPretty ? 2 : null); }\n\t\tcatch (ex) { s\u003dnew String(o); }\n\t}\n\telse {\n\t\ts\u003d\"null\";\n\t}\n\treturn s;\n}\n\nser_json_r\u003d function (s) {\n\ttry { return JSON.parse(s); }\n\tcatch (ex) { logmex(\"ERR\",5,\"SER PARSE JSON\",s,ex); throw(ex); }\n}\n\nser\u003d ser_json; //DFLT\n\nser_planoOproto\u003d function (ox,serFun,wantsPretty) { //U: para NO encodear strings, usa el primer caracter para distinguir\n\tvar o\u003d toJs(ox)\n\treturn ((typeof(o)\u003d\u003d\"string\") ? (\"\\t\"+o) : (\" \"+serFun(o,wantsPretty)));\n}\n\nser_planoOproto_r\u003d function (s,serFun_r) {\n\treturn (s \u0026\u0026 s.length\u003e0) ? \n\t\ts.charAt(0)\u003d\u003d\"\\t\" ? s.substr(1) : serFun_r(s.substr(1)) :\n\t\tnull;\n}\n\nser_planoOjson\u003d function (o, wantsPretty) { return ser_planoOproto(o,ser_json,wantsPretty); }\nser_planoOjson_r\u003d function (s) { return ser_planoOproto_r(s,ser_json_r); }\n\nescape_html\u003d function (str) { //U: encodea todos los carateres peligrosos en html para que no se rompa lo que se ve\n  return str!\u003dnull ? str.replace(/[^A-Za-z0-9-_]/g,function (char) { return \"\u0026#\"+char.charCodeAt(0)+\";\" }) : \"\";\n}\n\n\n//*****************************************************************************\n//S: algoritmos / funciones utiles\ntruncate\u003d function (num,decs) { var x\u003d Math.pow(10,decs); return Math.floor(num*x)/x; }\npromedio\u003d function (v0,v1) { return v0+(v1-v0)/2; }\nclonar\u003d function (o,ext) { var r\u003d {}; for (var k in o) { r[k]\u003d o[k] }; for (var k in ext) { r[k]\u003d ext[k] }; return r; }\n\ncbMostrarResultado \u003d function() { //U: callback generico que muestra el resultado y lo guarda en la variable global x\n\tvar r\u003d fArgsCopy(arguments);\n  if (console \u0026\u0026 console.log) { console.log(ser_json(r,true)); }\n\telse if (print) { print(ser_json(r,true));}\n\telse { logm(\"DBG\",1,\"RESULTADO\",r); }\n  x \u003d r;\n}\n\n//*****************************************************************************\n//S: algoritmos / hashes\nhash_string\u003d function (s) { //U: devuelve un hash \"bastante\" UNICO para un string\n\tvar bitArray \u003d sjcl.hash.sha256.hash(s);  \n\tvar digest_sha256 \u003d sjcl.codec.hex.fromBits(bitArray); \n\treturn digest_sha256;\n}\n\nhash\u003d function (o) { //U: devuelve un hash \"bastante\" UNICO para cualquier objeto\n\treturn hash_string(ser_json(o));\n}\n\n//*****************************************************************************\n//S: algoritmos / strings\nsplitForCapitalLetters \u003d function (string) {\n  if (string.length) { string \u003d string.split(/(?\u003d[A-Z])/); }\n  return string;\n}\n\nString.prototype.splitForCapitalLetters\u003d function () { return splitForCapitalLetters[this]; }\n\nlength_str_bytes\u003d function (str) {//U: returns the byte length of an utf8 string\n  var s \u003d str.length;\n  for (var i\u003dstr.length-1; i\u003e\u003d0; i--) {\n    var code \u003d str.charCodeAt(i);\n    if (code \u003e 0x7f \u0026\u0026 code \u003c\u003d 0x7ff) s++;\n    else if (code \u003e 0x7ff \u0026\u0026 code \u003c\u003d 0xffff) s+\u003d2;\n    if (code \u003e\u003d 0xDC00 \u0026\u0026 code \u003c\u003d 0xDFFF) i--; //trail surrogate\n  }\n  return s;\n}\n \n//*****************************************************************************\n//S: algoritmos / numeros y azar\nrandom_int\u003d function (max) { return Math.floor(Math.random()*(max||10)); } //U: un entero al azar entre 0 y max\n\n//*****************************************************************************\n//S: algoritmos / ordenar listas y claves\nordenadaPorPropiedadNumerica\u003d function (lista,propiedad) {\n\treturn lista.sort(function (a,b) { return a[propiedad]-b[propiedad]; })\n}\n\nclavesOrdenadasPorPropiedadNumerica\u003d function (kv,propiedad) {\n\treturn Object.keys(kv).sort(function (a,b) { return kv[a][propiedad]-kv[b][propiedad]; })\n}\n\n\n//*****************************************************************************\n//S: algoritmos / comparar\ncmp\u003d function (a,b) { return (a||\" \")\u003d\u003d(b||\" \") ? 0 : (a||\" \") \u003e (b||\" \") ? 1 : -1 }; //U: se puede pasar como parametro a sort para ordenar numeros o strings\n\n\ndiff\u003d function(v1, v2, quiereCompararMetodos, clavesParaIgnorar,pfx, err) { //U: compara dos valores cuales quiera y devuelve null si son iguales o un array de diferencias\n    pfx\u003d pfx || \"\";\n    err\u003d err || [];\n    var t1\u003d typeof(v1);\n    var t2\u003d typeof(v2);\n    if (t1!\u003dt2) {\n        if ((v1!\u003dnull \u0026\u0026 t1!\u003d\"undefined\" \u0026\u0026 v2!\u003dnull \u0026\u0026 t2!\u003d\"undefined\") \u0026\u0026 ((t1!\u003d\"function\" \u0026\u0026 t2!\u003d\"function\") || quiereCompararMetodos)) { //A: ninguno es metodo O hay al menos un valor O quiere comprar metodos\n            err.push([pfx,\"los tipos difieren\",t1,t2,v1,v2])\n        }\n    }\n    else if (typeof(v1)\u003d\u003d\"object\" \u0026\u0026 v1 \u0026\u0026 v2) {\n        for (var k in v1) {\n\t\t\t\t\t\tif (k \u0026\u0026 (!clavesParaIgnorar || clavesParaIgnorar.indexOf(k)\u003d\u003d-1)) {\n\t            diff(v1[k],v2[k],quiereCompararMetodos,clavesParaIgnorar,pfx+\"/\"+k,err)\n\t\t\t\t\t\t}\n        }\n        for (var k in v2) {\n\t\t\t\t\tif (k \u0026\u0026 (!clavesParaIgnorar || clavesParaIgnorar.indexOf(k)\u003d\u003d-1)) {\n            if(!v1[k] \u0026\u0026 v2[k]){ err.push([pfx, \"la clave no existe en el primer objeto\",k]); }\n\t\t\t\t\t}\n        }\n    }\n    else {\n        if (v1+\"\"!\u003dv2+\"\") {\n            if ((t1!\u003d\"function\" \u0026\u0026 t2!\u003d\"function\") || (v1!\u003dnull \u0026\u0026 v2!\u003dnull) || quiereCompararMetodos) { //A: ninguno es metodo O quiere comprar metodos\n                err.push([pfx,\"los valores difieren\",v1,v2]);\n            }\n        }\n    }\n    return err.length ? err : null;\n}\n\n\n//*****************************************************************************\n//S: algoritmos / lista de strings -\u003e a lista de partes o ints\nregex_map\u003d function (l,regex) { //U: aplicar una regex a todos los elementos de una lista\n\treturn l.map(function (e) {\n\t\tvar m\u003d e.match(regex);\n\t\treturn [e].concat(m);\n\t});\n}\n\nparseint_map\u003d function (l,regex) { //U: aplicar parseint a la captura de una regex sobre todos los elementos de una lista\n\tregex\u003d regex || /(\\d+)/;\n\tvar r\u003d [];\n\tfor (var i\u003d0; i\u003cl.length; i++) {\n\t\tvar e\u003d l[i];\n\t\tvar m\u003d e.match(regex);\n\t\tif (m) {\n\t\t\tvar n\u003d parseInt(m[1]);\n\t\t\tr.push([e,n]);\n\t\t}\n\t}\t\n\treturn r;\n}\n\n//*****************************************************************************\n//S: algoritmos / aplicar una funcion a todos los elementos de un conjunto\nfold\u003d function (o,f,acc) {\n\tif (o!\u003dnull) {\n\t\tif (o.getClass) {\n\t\t\tvar c\u003d new String(o.getClass());\n\t\t\tif (c.indexOf(\"Map\")\u003e-1) {\n\t\t\t\tvar ks\u003d toJs(o.keySet());\n\t\t\t\tfor (var i in ks) { acc\u003d f(o.get(ks[i]),ks[i],acc); }\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(o)) {\n\t\t\tfor (var i\u003d0; i\u003co.length; i++) { acc\u003d f(o[i],i,acc); }\n\t\t}\n\t\telse if (typeof(o)\u003d\u003d\"object\") { \n\t\t\tfor (var k in o) { acc\u003d f(o[k],k,acc); }\n\t\t}\n\t}\n\treturn acc;\n}\n\nfoldIfKeyMatch\u003d function (col, regex, cb, acc) {\n\treturn fold(col,function (v,k,acc) { return k.match(regex) ? cb(v,k,acc) : acc });\n}\n\nkvfirst\u003d function (v,k,acc) { logm(\"DBG\",9,\"KV FIRST\",{k: k, v: v}); acc[k]\u003d v \u0026\u0026 v[0] ; return acc; };\nkvfirstMap\u003d function (o,acc) { return fold(o,kvfirst,acc ||{}); }\n\n//*****************************************************************************\n//S: construir claveXvalor a partir de listas\nzipkv\u003d function (lOfK,lOfV,acc) {\n\treturn fold(lOfK,function (v,k,acc) { acc[v]\u003d lOfV[k]; return acc; },acc ||{});\n}\n\narrayToKv\u003d function (a,pfx) {\n\tpfx\u003d pfx || \"col\";\n\tvar r\u003d {};\n\tfor (var j\u003d0; j\u003ca.length; j++) { r[pfx+(j+1)]\u003d a[j]; };\n\treturn r;\n}\n\n\n//*****************************************************************************\n//S: algoritmos / nombres de archivos\nseguro_str\u003d function (s,caracterEscapeAntes,caracterEscapeDespues,caracteresPermitidos) {\n\tcaracterEscapeAntes\u003d caracterEscapeAntes || \"_\"; //A: seguro en nombres de archivo widows y linux\n\tcaracterEscapeDespues\u003d caracterEscapeDespues || caracterEscapeAntes;\n\tcaracteresPermitidos\u003d caracteresPermitidos || \"a-zA-Z0-9\"; //A: seguro en nombres de archivo widows y linux\n\treturn s.replace(new RegExp(\"[^\"+caracteresPermitidos+\"]\",\"g\"),function (m) { return caracterEscapeAntes+m.charCodeAt(0).toString(16)+caracterEscapeDespues; })\n}\n\nseguro_str_r\u003d function (s,caracterEscapeAntes,caracterEscapeDespues) {\n\tcaracterEscapeAntes\u003d caracterEscapeAntes || \"_\";\n\tcaracterEscapeDespues\u003d caracterEscapeDespues || caracterEscapeAntes;\n\treturn s.replace(new RegExp(caracterEscapeAntes+\"([0-9a-fA-F]+)\"+caracterEscapeDespues,\"g\"),function (m,h) { return String.fromCharCode(parseInt(h,16)); });\n}\n\nseguro_fname\u003d seguro_str;\nseguro_fname_r\u003d seguro_str_r;\n\nseguro_fpath\u003d function (s) { return seguro_str(s,null,null,\"a-zA-Z0-9/\").replace(/^\\//,\"\"); }\nseguro_fpath_r\u003d seguro_str_r;\n\n//*****************************************************************************\n//S: algoritmos / strings y plantillas\nescape_regexp_str\u003d function (str) { //U: devuelve la RegExp equivalente al literal str, ej. para construir expresiones regulares mezclando literales recibidos como parametro\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$\u0026\"); //VER: http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\n}\n\ndelete_marked_str\u003d function (s,markStart,markEnd) {\n\treturn s.replace(new RegExp(escape_regexp_str(markStart)+\"[^]*?\"+escape_regexp_str(markEnd),\"g\"),\"\");\n}\n\n//*****************************************************************************\n//S: wrappers\nfuncionComoA\u003d function(funcionQueDevuelveResultado,noQuiereCopiaArgs) { //D: envuelve una funcion sincrona en una asincrona, ej. para hacerla compatible con una api asincrona\n\treturn function () { try {\n\t\t\tvar args\u003d fArgsCopy(arguments);\n\t\t\tvar cb\u003d args.pop(); //D: CONVENCION! el callback va al final\n\t\t\tvar r\u003d funcionQueDevuelveResultado.apply(this,args);\n\t\t\tnoQuiereCopiaArgs ? cb(r) : cb(r,null,args);\n\t\t} catch (ex) { cb(null,ex,args); }\n\t}\n}\n\n//*****************************************************************************\n//S: algoritmos / cache / ultimoUso\nlimpiar_cache_recienUsados\u003d function (cache) {\n\tvar claves\u003d Object.keys(cache.elementoYuso)\n\tvar elementosAntesCnt\u003d claves.length;\n\tvar cuantosHayQueBorrar\u003d elementosAntesCnt - cache.cntMax;\n\tif (cuantosHayQueBorrar\u003e0 || (cache.szMax \u0026\u0026 cache.szUsada\u003ecache.szMax)) {\n\t\tclaves\u003d clavesOrdenadasPorPropiedadNumerica(cache.elementoYuso,\"cuandoUso\");\n\t\tfor (var i\u003d0; (i\u003ccuantosHayQueBorrar || (cache.szMax \u0026\u0026 cache.szUsada\u003ecache.szMax)) \u0026\u0026 i\u003cclaves.length; i++) {\n\t\t\tvar k\u003d claves[i]\n\t\t\tvar e\u003d cache.elementoYuso[k];\n\t\t\tif (e) {\n\t\t\t\tcache.szUsada-\u003d e.sz;\n\t\t\t\tdelete(cache.elementoYuso[k]);\n\t\t\t}\n\t\t}\n\t}\n\tlogm(\"DBG\",8,\"CACHE LIMPIAR\",{ cnt: claves.length, cntMax: cache.cntMax, borrados: i\u003e0 ? claves.slice(0,i) : \"NINGUNO\" });\n}\n\nsea_cache_recienUsados\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\tvar sz\u003d typeof(v)\u003d\u003d\"string\" ? v.length : sz || 0; //A: OJO! solo podemos contar el tamaÃ±o de strings\n\tvar r\u003d { cuandoUso: ahora(), valor: v, sz: sz};\n\tborrar_cache_recienUsados(cache,k); //A: descontamos el que vamos a reemplazar si estaba\n\tcache.szUsada+\u003d sz; //A: YA cuento el tamaÃ±o, por si tengo que borrar para no pasarme de tamaÃ±o total\n\tif (!quiereLimpiarDespues) { limpiar_cache_recienUsados(cache); } //A: hice lugar si necesitaba\n\tcache.elementoYuso[k]\u003d r;\t//A: ahora agrego el elemento\n\treturn v;\n}\n\nde_cache_recienUsados\u003d function (cache,k) {\n\tvar r\u003d cache.elementoYuso[k];\n\tif (r) { \n\t\tr.cuandoUso\u003d ahora(); \n\t\treturn r.valor;\n\t}\n}\n\nborrar_cache_recienUsados\u003d function (cache,k) {\n\ttry { \n\t\t\tvar e\u003d cache.elementoYuso[k];\n\t\t\tif (e) {\n\t\t\t\tcache.szUsada-\u003d e.sz;\n\t\t\t\tdelete(cache.elementoYuso[k]);\n\t\t\t}\n\t}\n\tcatch (ex) {}; //A: si no estaba, no pasa nada\t\n}\n\nborrarTodo_cache_recienUsados\u003d function (cache) {\n\tcache.elementoYuso\u003d {};\n\tcache.szUsada\u003d 0;\n}\n\nnuevo_cache_recienUsados\u003d function (nombre,cntMax,szMax) {\n\tvar r\u003d { nombre: nombre, cntMax: cntMax, szMax: szMax, szUsada: 0, elementoYuso: {}};\n\tfor (var k in CacheApi_recienUsados) { r[k]\u003d CacheApi_recienUsados[k] }\n\treturn r;\n}\n\nCacheApi_recienUsados\u003d {\n\tnuevo: nuevo_cache_recienUsados,\n\tde: de_cache_recienUsados,\n\tde_a: funcionComoA(de_cache_recienUsados,true),\n \tsea: sea_cache_recienUsados,\n\tlimpiar: limpiar_cache_recienUsados,\n\tborrar: borrar_cache_recienUsados,\n\tborrarTodo: borrarTodo_cache_recienUsados,\n};\n\n//*****************************************************************************\n//S: algoritmos / cache / archivos \nnuevo_cache_archivos\u003d function (nombre, path) {\n\tensure_dir(path);\n\tr\u003d { nombre: nombre, path: path, dirsOk: {} }\n\tfor (var k in CacheApi_archivos) { r[k]\u003d CacheApi_archivos[k] }\n\treturn r;\n}\n\nlimpiar_cache_archivos\u003d function (cache) {\n\t//XXX:TODO\n\n}\n\nsea_cache_archivos\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\tvar ps\u003d seguro_fpath(k);\n\tvar p\u003d ps.replace(/[^\\/]*$/,\"\");\n\tif (!cache.dirsOk[p]) { ensure_dir(cache.path+\"/\"+p); cache.dirsOk[p]\u003d 1; }\n\tset_file(cache.path+\"/\"+ps,ser_planoOjson(v));\n\treturn v;\n}\n\n//XXX:GASTON: CREAR INVALIDAR FILE CON *\nborrar_cache_archivos\u003d function(cache,k) {\n\tvar fname\u003d cache.path+\"/\"+seguro_fpath(k);\n\tlogm(\"NFO\", 5, \"CACHE ARCHIVOS BORRAR\", {k: k, fname: fname});\n  delete_file(fname);\n};\n\nde_cache_archivos\u003d function (cache,k) {\n\treturn ser_planoOjson_r(get_file(cache.path+\"/\"+seguro_fpath(k)));\n}\n\nborrarTodo_cache_archivos\u003d function (cache) { //XXX: TODO\n}\n\nCacheApi_archivos\u003d {\n\tnuevo: nuevo_cache_archivos,\n\tde: de_cache_archivos,\n\tde_a: funcionComoA(de_cache_archivos),\n \tsea: sea_cache_archivos,\n\tlimpiar: limpiar_cache_archivos,\n\tborrar: borrar_cache_archivos,\n\tborrarTodo: borrarTodo_cache_archivos,\n};\n\n//*****************************************************************************\n//S: algoritmos / cache / archivos  en phonegap\nnuevo_cache_archivosMovil\u003d function (nombre, pfx) {\n\tr\u003d { nombre: nombre, pfx: pfx }\n\tfor (var k in CacheApi_archivosMovil) { r[k]\u003d CacheApi_archivosMovil[k] }\n\treturn r;\n}\n\nlimpiar_cache_archivosMovil\u003d function (cache) {\n\t//XXX:TODO\n}\n\nsea_cache_archivosMovil\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\tvar f1\u003d function () { try {\n\t\tvar path\u003d CFGLIB.pathToLib+\"cache/\"+cache.pfx+\"/\"+seguro_fname(cache.pfx+\"_\"+k);\n\t\tlogm(\"DBG\",7,\"sea_cache_archivosMovil \",{k:k,path:path});\n\t\t\n\t\tset_file_bin_a(path,ser_planoOjson(v),function () { \n\t\t\tlogm(\"DBG\",1,\"sea_cache_archivosMovil OK \",{k:k,path:path}); \n\t\t}, function(err) {\n\t\t\tlogm(\"DBG\",7,\"sea_cache_archivosMovil ERR \",{k:k,path:path,err:err});\n\t\t});\n\t} catch (ex) { \n\t\tlogm(\"ERR\",3,\"sea_cache_archivosMovil \",{k:k,message:ex.message});\n\t} };\n\tensure_dir(CFGLIB.pathToLib+\"cache/\"+cache.pfx,f1,f1);\n}\n\nborrar_cache_archivosMovil\u003d function (cache,k) {\n\tvar path\u003d CFGLIB.pathToLib+\"cache/\"+cache.pfx+\"/\"+seguro_fname(cache.pfx+\"_\"+k);\n\t\tlogm(\"DBG\",7,\"borrar_cache_archivosMovil \",{k:k,path:path});\n\t\t\n\tdelete_file(path,function () { \n\t\t\tlogm(\"DBG\",1,\"borrar_cache_archivosMovil OK \",{k:k,path:path});\n\t\t}, function(err) { \n\t\t\tlogm(\"DBG\",7,\"borrar_cache_archivosMovil ERR \",{k:k,path:path,err:err});\n\t\t});\n}\n\nborrarTodo_cache_archivosMovil\u003d function (cache,quiereSinPedirConfirmacion,cb) {\n\tvar path\u003d CFGLIB.pathToLib+\"cache/\"+cache.pfx;\n\tdeleteAll_dir(path,quiereSinPedirConfirmacion,cb);\n}\n\nde_a_cache_archivosMovil\u003d function (cache,k,cbok,cbf) {\n\tget_file_a(CFGLIB.pathToLib+\"cache/\"+cache.pfx+\"/\"+seguro_fname(cache.pfx+\"_\"+k),\"bin\",\n\t\tfunction (d) { \n\t\t\tvar v\u003d ser_planoOjson_r(d); \n\t\t\tcbok(v,(d||\"\").length);\n\t\t},\n\t\tcbf||function (err) { cbok(null,-1,err); });\n}\n\nCacheApi_archivosMovil\u003d {\n\tnuevo: nuevo_cache_archivosMovil,\n\tde_a: de_a_cache_archivosMovil,\n \tsea: sea_cache_archivosMovil,\n\tlimpiar: limpiar_cache_archivosMovil,\n\tborrar: borrar_cache_archivosMovil,\n\tborrarTodo: borrarTodo_cache_archivosMovil,\n};\n\n//*****************************************************************************\n//S: errores, coordinar con libcx!!!  \nesCxError \u003d function(data) {\n\tvar r\u003d (data\u003d\u003dnull) || (typeof(data)\u003d\u003d\"string\" \u0026\u0026 data.indexOf(\"LibCxException\")!\u003d-1) || data.LibCxException!\u003dnull;\n\tif (r) { logm(\"DBG\",5,\"esCxError?\",{esError:r, data: ser_planoOjson(data).substr(0,100),}); }\n\treturn r;\n};\n\nsetCxError \u003d function(msg,data) { //U: para generar una respuesta que de verdadero a esCxError\n\treturn {\"LibCxException\": msg, data: data};\n};\n\n\n//*****************************************************************************\n//S: wrappers\n//XXX: generalizar para que tambien sirva para cache en db\n//XXX: generalizar, agregar localStorage\nenvolver_contador\u003d function (f) { //D: envuelve la funcion en otra que cuenta las veces que la llamaste, ej. para saber cuantos tiles borraste dentro de un poligono \n    var fConContador;\n    fConContador\u003d function () {\n        fConContador.cuenta++;\n        return f.apply(this,arguments);\n    }\n    fConContador.cuenta\u003d0;\n    return fConContador;\n}\n\nnuevo_cache_envuelto\u003d function (cache,fun,fun_r) {\n\tvar sea_x\u003d cache.sea_ori\u003d cache.sea;\n\tvar de_a_x\u003d cache.de_a_ori\u003d cache.de_a;\n\tcache.sea\u003d function (cache,k,v,sz,quiereLimpiarDespues) {\n\t\tsea_x(cache,k,fun(v),sz,quiereLimpiarDespues);\n\t};\n\tcache.de_a\u003d function (cache,k,cbok,cbf) {\n\t\tde_a_x(cache,k,function (data,err) { try {\n\t\t\t\tvar args\u003d fArgsCopy(arguments);\n\t\t\t\tif (data!\u003dnull) { args[0]\u003d fun_r(data); } //A: SOLO cambio data por aplicar la funcion a data, lo demas sigue el mismo protocolo\n\t\t\t\tcbok.apply(this,args);\n\t\t} catch (ex) { logmex(\"ERR\",1,\"CACHE ENVUELTO DE CB ERR\",{ cache: cache.nombre, k: k},ex) }}, cbf);\n\t};\n\treturn cache;\n}\n\nfuncionConCacheDefault_a\u003d function (cbQueActualiza,cacheDondeGuardo,keyF,cbIdx,quierePasarSizeACb) { //U: intenta llamar a la funcion, si va bien guarda los datos, si falla y tiene datos guardados los usa\n\tlogm(\"DBG\",5,\"funcionConCacheDefault_a MK \",cacheDondeGuardo);\n\tvar r\u003d (function () {try{\n\t\tlogm(\"DBG\",8,\"funcionConCacheDefault_a\",{args:args,clave:clave});\n\t\tvar args\u003d fArgsCopy(arguments);\n\t\tvar cb\u003d args[cbIdx]; //U: indice de la que hay que llamar con los datos\n\t\tvar clave\u003d keyF.apply(this,args);\n\n\t\targs[cbIdx]\u003d function (data,sz) {try{\n\t\t\tvar argsParaCb\u003d quierePasarSizeACb ? fArgsCopy(arguments) : fArgsCopy(arguments,2,[data]);\n\t\t\tif (!esCxError(data)) {try{ //A: consegui datos nuevos, actualizo el cache\n\t\t\t\tcacheDondeGuardo.sea(cacheDondeGuardo,clave,data,sz);\n\t\t\t\tlogm(\"DBG\",8,\"CACHE OK GUARDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_sz: sz, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\tcb.apply(this,argsParaCb); //A: llamo a la funcion que esperaba el resultado con los datos nuevos\t\n\t\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE INVOCANDO CB\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }}\n\t\t\telse {try{//A: no consegui los datos, me vino error\n\t\t\t\tlogm(\"DBG\",8,\"CACHE NO CONSEGUI DATOS NUEVOS, INTENTO CACHE\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\n\t\t\t\tcacheDondeGuardo.de_a(cacheDondeGuardo,clave, function (data,sz,err) {try{\n\t\t\t\t\tif (data!\u003dnull \u0026\u0026 !err) { logm(\"DBG\",8,\"CACHE ESTABA\",{cache: cacheDondeGuardo.nombre, clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)}); //XXX:MAU agregar que puede haber NULL para esa clave\n\t\t\t\t\t\targsParaCb[0]\u003d data;\n\t\t\t\t\t\tcb.apply(this,argsParaCb);\n\t\t\t\t\t}\n\t\t\t\t\telse { \n\t\t\t\t\t\tlogm(\"DBG\",8,\"CACHE FALTA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\t\t\tcb.apply(this,argsParaCb);\n\t\t\t\t\t}\n\t\t\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE INVOCANDO CB\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); } });\n\t\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE BUSCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }}\n\t\t}catch(ex){ logmex(\"ERR\",1,\"CACHE RECIBIENDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }} ; \n\t\t//A: reemplace el callback que recibe el resultado por mi funcion que si llego bien lo guarda y se lo pasa y sino, le pasa uno del cache\n\t\tcbQueActualiza.apply(this, args);\t\n\t}catch(ex){ logmex(\"ERR\",1,\"CACHE PIDIENDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); }}); \n\t//A: r es una funcion que de afuera se ve igual que la original, pero si la original falla usa datos de la ultima vez que funciono\n\tr.cache\u003d cacheDondeGuardo;\n\tr.keyF\u003d keyF;\n\tr.funcionEnvuelta\u003d cbQueActualiza;\n\treturn r;\n};\n\nfuncionConCache_a\u003d function (cbSiNoEsta,cacheDondeGuardo,keyF,cbIdx,quierePasarSizeACb) {\n\tlogm(\"DBG\",5,\"funcionConCache MK \",cacheDondeGuardo);\n\tvar r\u003d (function () { try {\n\t\tvar args\u003d fArgsCopy(arguments); //A: los args de la LLAMADA ORIGINAL a la funcion\n\t\tvar clave\u003d keyF.apply(this,args);\n\t\tlogm(\"DBG\",8,\"funcionConCache_a\",{args:args,clave:clave});\n\t\tvar cb\u003d args[cbIdx]; //U: indice de la que hay que llamar con los datos\n\t \tcacheDondeGuardo.de_a(cacheDondeGuardo,clave, function (data,sz,err) { try {\n\t\t\tif (data!\u003dnull \u0026\u0026 !err) { logm(\"DBG\",8,\"CACHE ESTABA\",{cache: cacheDondeGuardo.nombre, clave: clave, sz: sz, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)}); //XXX:MAU agregar que puede haber NULL para esa clave en el cache\n\t\t\t\tif (quierePasarSizeACb)  { args.unshift(sz); }\n\t\t\t\targs.unshift(data);\n\t\t\t\tcb.apply(this,args);\n\t\t\t}\n\t\t\telse { logm(\"DBG\",8,\"CACHE FALTA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\targs[cbIdx]\u003d function (data,sz,err) { try {\n\t\t\t\t\tvar argsCb\u003d quierePasarSizeACb ? fArgsCopy(arguments) : fArgsCopy(arguments,2,[data]);\n\t\t\t\t\tif (!esCxError(data)) {\n\t\t\t\t\t\tcacheDondeGuardo.sea(cacheDondeGuardo,clave,data,sz);\n\t\t\t\t\t\tlogm(\"DBG\",8,\"CACHE GUARDO\",{cache: cacheDondeGuardo.nombre,clave: clave, sz: sz, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlogm(\"DBG\",8,\"CACHE ES ERROR CX NO GUARDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\t\t}\n\t\t\t\t\tcb.apply(this,argsCb);\t\n\t\t\t\t}catch(ex){logmex(\"ERR\",1,\"CACHE INVOCANDO CON DATOS\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex);}};\n\t\t\t\tcbSiNoEsta.apply(this, args);\t\n\t\t\t}\n\t\t} catch (ex) { logmex(\"ERR\",1,\"CACHE INVOCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); } });\n\t} catch (ex) { logmex(\"ERR\",1,\"CACHE BUSCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); } });\n\tr.cache\u003d cacheDondeGuardo;\n\tr.keyF\u003d keyF;\n\tr.funcionEnvuelta\u003d cbSiNoEsta;\n\treturn r;\n};\n\n//XXX:MAURICIO:agregar que si ya hay un thread calculando el valor, los demas esperen en vez de TAMBIEN calcularlo\nfuncionConCache\u003d function (cbSiNoEsta,cacheDondeGuardo,keyF,quiereLlamarSiempre) {\n\tlogm(\"DBG\",1,\"funcionConCache MK\",cacheDondeGuardo);\n\tvar r\u003d function () {\n\t\ttry {\n\t\t\tlogm(\"DBG\",1,\"funcionConCache\",cacheDondeGuardo);\n\t\t\tvar args\u003d fArgsCopy(arguments);\n\t\t\tvar clave\u003d keyF.apply(this,args);\n\t\t\tvar data\u003d quiereLlamarSiempre ? null : cacheDondeGuardo.de(cacheDondeGuardo,clave);\n\t\t\tif (data!\u003dnull) { logm(\"DBG\",8,\"CACHE ESTABA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t}\n\t\t\telse { logm(\"DBG\",8,\"CACHE FALTA\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data_ej: data \u0026\u0026 (data+\"\").substr(0,100)});\n\t\t\t\ttry {\n\t\t\t\t\tdata\u003d cbSiNoEsta.apply(this,args);\n\t\t\t\t\tcacheDondeGuardo.sea(cacheDondeGuardo,clave,data);\n\t\t\t\t} catch (ex) { \n\t\t\t\t\tlogmex(\"ERR\",1,\"CACHE INVOCANDO CON DATOS\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); \n\t\t\t\t\tthrow(ex); //A: vuelvo a lanzar la excepcion porque otros la precisan, ej. libcx para avisarle al cliente\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn data;\n\t\t} catch (ex) { \n\t\t\tlogmex(\"ERR\",1,\"CACHE INVOCANDO\",{cache: cacheDondeGuardo.nombre,clave: clave, args: args, data: data},ex); throw(ex); \n\t\t\tthrow(ex); //A: vuelvo a lanzar la excepcion porque otros la precisan, ej. libcx para avisarle al cliente\n\t\t}\n\t};\n\tr.cache_borrar\u003d function () {\n\t\tvar args\u003d fArgsCopy(arguments);\n\t\tvar clave\u003d keyF.apply(this,args);\n\t\tlogm(\"DBG\",8,\"funcionConCache CACHE_BORRAR\",{args:args,clave:clave});\n\t\tcacheDondeGuardo.borrar(cacheDondeGuardo,clave);\n\t};\n\treturn r;\n}\n\n//XXX: descomponer y hacer mas configurable y componible!\nfuncionConCache_a_archivos \u003d function(nombre, funcion, cbIdx, funcionClavePara, prefijoNombreArchivo, cache, quierePasarSizeACb) { //D: envuelve una funcion con cache, si esta en movil usa archivos encriptados para cuando este offline\n    prefijoNombreArchivo \u003d prefijoNombreArchivo || \"\";\n\n    var cache \u003d cache || nuevo_cache_recienUsados(nombre, 1); //A:DFLT\n\n    var funcionConCacheArchivos \u003d funcion; //A: DFLT, ej. cxAjaxCall que trae los datos\n\n    if (GLOBAL.enAppMovil || GLOBAL.CACHE_LOCALSTORAGE) {\n        var cacheArchivos \u003d nuevo_cache_envuelto(nuevo_cache_archivosMovil(nombre + \"_archivos\", prefijoNombreArchivo), encriptar, encriptar_r);\n        funcionConCacheArchivos \u003d funcionConCache_a(funcion, cacheArchivos, funcionClavePara, cbIdx, true); //A: si tiene los datos en el cache, que nos pase el size para el cache recienUsados\n    }\n\t\telse if (GLOBAL.rtType\u003d\u003d\"java\") {\n        var cacheArchivos \u003d nuevo_cache_archivos(\"x_cache_\"+nombre, \"x_cache_\"+nombre);\n        funcionConCacheArchivos \u003d funcionConCache_a(funcion, cacheArchivos, funcionClavePara, cbIdx,true);\n\t\t}\n\n    var funcionr \u003d funcionConCache_a(funcionConCacheArchivos, cache, funcionClavePara, cbIdx, quierePasarSizeACb); //A: aca, como quiera la funcion\n    funcionr.cache \u003d cache;\n    funcionr.cacheArchivos \u003d cacheArchivos;\n\t\tfuncionr.cacheBorrar\u003d function () {\n\t   \tif (funcionr.cacheArchivos) { funcionr.cacheArchivos.borrarTodo(funcionr.cacheArchivos,true); }\n \t   \tif (funcionr.cache) { funcionr.cache.borrarTodo(funcionr.cache); }\n\t\t}\n    return funcionr;\n}\n\nfuncionConCacheDefault_a_archivos \u003d function(nombre, funcion, cbIdx, funcionClavePara, prefijoNombreArchivo, cache) { //D: envuelve una funcion con cache, si esta en movil usa archivos encriptados para cuando este offline\n    prefijoNombreArchivo \u003d prefijoNombreArchivo || \"\";\n    var cache \u003d cache || nuevo_cache_recienUsados(nombre, 1);\n\n    var funcionConCacheArchivos \u003d funcion; //A: DFLT\n\n    if (GLOBAL.enAppMovil || GLOBAL.CACHE_LOCALSTORAGE) { //XXX:MAU cambiar por tiene filesystem!\n        var cacheArchivos \u003d nuevo_cache_envuelto(nuevo_cache_archivosMovil(nombre + \"_archivos\", prefijoNombreArchivo), encriptar, encriptar_r);\n        funcionConCacheArchivos \u003d funcionConCacheDefault_a(funcion, cacheArchivos, funcionClavePara, cbIdx,true);\n    }\n\t\telse if (GLOBAL.rtType\u003d\u003d\"java\") {\n        var cacheArchivos \u003d nuevo_cache_archivos(\"x_cache_\"+nombre, \"x_cache_\"+nombre);\n        funcionConCacheArchivos \u003d funcionConCacheDefault_a(funcion, cacheArchivos, funcionClavePara, cbIdx);\n\t\t}\n\n    var funcionr \u003d funcionConCacheDefault_a(funcionConCacheArchivos, cache, funcionClavePara, cbIdx);\n    funcionr.cache \u003d cache;\n    funcionr.cacheArchivos \u003d cacheArchivos;\n\t\tfuncionr.cacheBorrar\u003d function () {\n\t   \tif (funcionr.cacheArchivos) { funcionr.cacheArchivos.borrarTodo(funcionr.cacheArchivos,true); }\n \t   \tif (funcionr.cache) { funcionr.cache.borrarTodo(funcionr.cache); }\n\t\t}\n    return funcionr;\n}\n\n//*****************************************************************************\n//S: validaciones\nvalidate_pass\u003d function(security) { //XXX:MOVER:a lib, asi tambien se puede usar en el backend\n        var msg \u003d \"\";\n        var newPassHasCorrectLength \u003d security.newPass.length \u003e 5; //XXX:CFG\n        var newPassContainsNumber \u003d /\\d/.test(security.newPass);\n        var newPassContainsLetter \u003d /[a-zA-Z]/.test(security.newPass);\n\n        if (!security.currentPass || !security.newPass || !security.newPassCheck) {\n            msg \u003d \"Falta ingresar al menos un dato\";\n            return msg;\n        }\n        if (security.newPass !\u003d security.newPassCheck) {\n            msg \u003d \"La clave nueva no coincide con la repeticion de la misma\";\n            return msg;\n        }\n        if (security.currentPass !\u003d Cfg.pass) {\n            msg \u003d \"ContraseÃ±a actual incorrecta\";\n            return msg;\n        }\n        if (!(newPassHasCorrectLength \u0026\u0026 newPassContainsNumber \u0026\u0026 newPassContainsLetter)){\n            msg \u003d \"La contraseÃ±a debe tener una longitud de 6 caracteres como mÃ­nimo y contener al menos un nÃºmero y una letra\";\n            return msg;\n        }\n        return msg;\n}\n\n\n" 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD OK:"lib.js" 
LOG:2016-02-24_13:22:48:DBG:7:RT JS LOAD OK:{"requiredFile":"lib.js","path":"lib.js"}: 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD OK:"librt.js" 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD TRY:"t_webServer.js" 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET:"java.io.FileInputStream@3879c232" 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:1099 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:-1 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET RESULT:"//INFO: una aplicacion web, multithread (un solo interprete js con estado compartido, la app DEBE ocuparse de que los threads no se \"pisen\"\n\nvar cntShared\u003d 0; //U: esta variable \n\nonWebRequestImpl\u003d function () { //U: atiende un webrequest a nivel aplicacion\n\twpath \u003d webRequestPath(webRequest); //U: la url que vino del navegador\n\thdr \u003d webRequestHeaders(webRequest); //U: los headers (cookies, etc.)\n\tsession \u003d webRequest.getSession(true); //U: sesion si tenia, sino la crea\n\tlogm(\"DBG\", 5, \"WEB JS DISPATCH\", { from: webRequestAddr(webRequest), session: session.getId() + \"\", webMethod: webMethod, path: wpath, hdr: hdr });\n\n\tload(\"t_webServerMod.js\");\n\tif (webMethod\u003d\u003d\"GET\" || webMethod\u003d\u003d\"POST\") { //A: la vista\n\t\twebResponseWrite(webResponse,\"HOLA \"+(new Date())+\" CNT\u003d\"+(cntShared++)+\" CNT2\u003d\"+(CNT2)+\" \"+ser_json({ from: webRequestAddr(webRequest), session: session.getId() + \"\", webMethod: webMethod, path: wpath, hdr: hdr }));\n\t}\n}\n\nonWebRequest\u003d onWebRequestImpl; //U: la CONVENCION es que el servlet llama la funcion onWebRequest si existe\n\nprint(\"SI APARECE MAS DE UNA VEZ, ES UN ERROR\");\n" 
LOG:2016-02-24_13:22:48:DBG:9:RT JS EVAL START PATH=t_webServer.js SRC:"//INFO: una aplicacion web, multithread (un solo interprete js con estado compartido, la app DEBE ocuparse de que los threads no se \"pisen\"\n\nvar cntShared\u003d 0; //U: esta variable \n\nonWebRequestImpl\u003d function () { //U: atiende un webrequest a nivel aplicacion\n\twpath \u003d webRequestPath(webRequest); //U: la url que vino del navegador\n\thdr \u003d webRequestHeaders(webRequest); //U: los headers (cookies, etc.)\n\tsession \u003d webRequest.getSession(true); //U: sesion si tenia, sino la crea\n\tlogm(\"DBG\", 5, \"WEB JS DISPATCH\", { from: webRequestAddr(webRequest), session: session.getId() + \"\", webMethod: webMethod, path: wpath, hdr: hdr });\n\n\tload(\"t_webServerMod.js\");\n\tif (webMethod\u003d\u003d\"GET\" || webMethod\u003d\u003d\"POST\") { //A: la vista\n\t\twebResponseWrite(webResponse,\"HOLA \"+(new Date())+\" CNT\u003d\"+(cntShared++)+\" CNT2\u003d\"+(CNT2)+\" \"+ser_json({ from: webRequestAddr(webRequest), session: session.getId() + \"\", webMethod: webMethod, path: wpath, hdr: hdr }));\n\t}\n}\n\nonWebRequest\u003d onWebRequestImpl; //U: la CONVENCION es que el servlet llama la funcion onWebRequest si existe\n\nprint(\"SI APARECE MAS DE UNA VEZ, ES UN ERROR\");\n" 
SI APARECE MAS DE UNA VEZ, ES UN ERROR
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD OK:"t_webServer.js" 
LOG:2016-02-24_13:22:48:DBG:9:SERVLET SCRIPT EXECUTED OK:"t_webServer.js" 
LOG:2016-02-24_13:22:48:DBG:5:WEB JS DISPATCH:{"from":"0:0:0:0:0:0:0:1","session":"1o5rih7fowgwc1ku35cj2et3f9","webMethod":"GET","path":"/app/hola","hdr":{"Cookie":"JSESSIONID=17et2bb9ab55q1punjj8alv0g9","Host":"localhost:8999","Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8","Upgrade-Insecure-Requests":"1","Accept-Language":"en-US,en;q=0.8,und;q=0.6","User-Agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36","Connection":"keep-alive","Cache-Control":"max-age=0","Accept-Encoding":"gzip, deflate, sdch"}}: 
LOG:2016-02-24_13:22:48:DBG:7:RT JS LOAD TRYING PATH:{"requiredFile":"t_webServerMod.js","path":"t_webServerMod.js","LibRtMyEnv":"null"}: 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD TRY:"t_webServerMod.js" 
LOG:2016-02-24_13:22:48:DBG:5:RT JS LOAD TRY:"t_webServerMod.js" 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET:"java.io.FileInputStream@60d2b97b" 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:95 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET READ:-1 
LOG:2016-02-24_13:22:48:DBG:9:STREAM GET RESULT:"if (!GLOBAL.t_webServerModInitialized) { t_webServerModInitialized\u003d true;\n\tCNT2\u003d 0;\n}\n\nCNT2++;\n" 
LOG:2016-02-24_13:22:48:DBG:9:RT JS EVAL START PATH=t_webServerMod.js SRC:"if (!GLOBAL.t_webServerModInitialized) { t_webServerModInitialized\u003d true;\n\tCNT2\u003d 0;\n}\n\nCNT2++;\n" 
LOG:2016-02-24_13:22:48:DBG:7:RT JS LOAD TRYING PATH EXCEPTION "GLOBAL" is not defined. 	at t_webServerMod.js:1 > 	at librt.js:122 (anonymous) > 	at t_webServer.js:11 (anonymous) > :{"requiredFile":"t_webServerMod.js","path":"t_webServerMod.js"}: 
LOG:2016-02-24_13:22:48:ERR:1:RT JS LOAD SCRIPT EVAL ERROR EXCEPTION "GLOBAL" is not defined. 	at t_webServerMod.js:1 > 	at librt.js:122 (anonymous) > 	at t_webServer.js:11 (anonymous) > :{"requiredFile":"t_webServerMod.js","JSLIB":["/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/WEB-INF/classes/../lib/js","/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/WEB-INF/classes/lib/js","lib/js","."]}: 
LOG:2016-02-24_13:22:48:ERR:9:SERVLET SCRIPT TRYING onWebRequest EXCEPTION (not a problem unless you want a shared js instance) EXCEPTION org.mozilla.javascript.JavaScriptException: ReferenceError: "GLOBAL" is not defined. (librt.js#150) _c_anonymous_18@librt.js@150 > call@librt.js@-1 > callName@OptRuntime.java@63 > _c_anonymous_1@t_webServer.js@11 > call@t_webServer.js@-1 > doTopCall@ContextFactory.java@394 > doTopCall@ScriptRuntime.java@3091 > call@t_webServer.js@-1 > jsCall@LibRtJsRhino.java@36 > webrun@LibRtServlet.java@79 > service@LibRtServlet.java@36 > service@HttpServlet.java@820 > handle@ServletHolder.java@652 > doHandle@ServletHandler.java@445 > handle@ScopedHandler.java@137 > handle@SecurityHandler.java@556 > doHandle@SessionHandler.java@227 > doHandle@ContextHandler.java@1044 > doScope@ServletHandler.java@372 > doScope@SessionHandler.java@189 > doScope@ContextHandler.java@978 > handle@ScopedHandler.java@135 > handle@ContextHandlerCollection.java@255 > handle@HandlerCollection.java@154 > handle@HandlerWrapper.java@116 > handle@Server.java@367 > handleRequest@AbstractHttpConnection.java@486 > headerComplete@AbstractHttpConnection.java@926 > headerComplete@AbstractHttpConnection.java@988 > parseNext@HttpParser.java@640 > parseAvailable@HttpParser.java@235 > handle@AsyncHttpConnection.java@82 > handle@SslConnection.java@196 > handle@SelectChannelEndPoint.java@628 > run@SelectChannelEndPoint.java@52 > runJob@QueuedThreadPool.java@608 > run@QueuedThreadPool.java@543 > run@Thread.java@724 > : 
LOG:2016-02-24_13:22:48:NFO:2:SERVLET SCRIPT REQUEST INITIALIZE ONCE DONE, wants shared instance:false 
LOG:2016-02-24_13:22:48:DBG:9:SERVLET SCRIPT REQUEST END handled:true 
2016-02-24 13:24:10.978:INFO:oejsl.ELContextCleaner:javax.el.BeanELResolver purged
2016-02-24 13:24:10.979:INFO:oejsh.ContextHandler:stopped o.e.j.w.WebAppContext{/,file:/tmp/jetty-0.0.0.0-8999-emrt.jar-_-any-/webapp/},file:/home/usr10/devel/consultoria/EM/devel/rt_java/lib/jar/emrt.jar
2016-02-24 13:24:11.046:INFO:oejut.ShutdownThread:shutdown already commenced
